[{"path":"https://jl5000.github.io/gedcomS7/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Jamie Lendrum Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/articles/1_intro_to_gedcom.html","id":"what-is-gedcom","dir":"Articles","previous_headings":"","what":"What is GEDCOM?","title":"Introduction to GEDCOM","text":"Genealogical Data Communication (GEDCOM) specification storing exchanging genealogical data. created Church Jesus Christ Latter-day Saints 1984, become de-facto standard used worldwide. current version 7.0 version supported gedcomS7.","code":""},{"path":"https://jl5000.github.io/gedcomS7/articles/1_intro_to_gedcom.html","id":"what-does-a-gedcom-file-look-like","dir":"Articles","previous_headings":"","what":"What does a GEDCOM file look like?","title":"Introduction to GEDCOM","text":"GEDCOM file plain text file (extension .ged), contains records. records contain information : Families Individuals Multimedia Sources Repositories Notes Submitters also two special records appear beginning end file; header trailer. sample file looks like : record nested structure containing one lines. Lines GEDCOM file can number components: Level: level hierarchical structure. appears every line. New records begin level 0; Cross-reference identifier: string (looks like @XYZ@) signals beginning new record (apart header trailer); Tag: short string given immediately level cross-reference identifier indicates type information provided line. controlled values. User-defined tags allowed GEDCOM programs, discouraged ; Line value: value associated tag. example, line 3, version GEDCOM specification file adheres 7.0. line value can also cross-reference pointer, links another record file (looks like @XYZ@). example, Family record beginning line 18 references Individual records members family. lines components. example, first line records contain line value. GEDCOM 7.0 specification substantial, describing strict rules around specific set tags hierarchical structures allowed record type. shouldn’t need know use package, designed automate construction files.","code":"sample_file <- readLines(\"remarriage1.ged\") sample_file #>  [1] \"0 HEAD\"                 \"1 GEDC\"                 \"2 VERS 7.0\"             #>  [4] \"0 @I1@ INDI\"            \"1 NAME John Q /Public/\" \"1 SEX M\"                #>  [7] \"1 FAMS @F1@\"            \"1 FAMS @F2@\"            \"0 @I2@ INDI\"            #> [10] \"1 NAME Jane /Doe/\"      \"1 SEX F\"                \"1 FAMS @F1@\"            #> [13] \"0 @I3@ INDI\"            \"1 NAME Mary /Roe},{"path":"https://jl5000.github.io/gedcomS7/articles/2_implementation.html","id":"why-gedcoms7","dir":"Articles","previous_headings":"","what":"Why gedcomS7?","title":"Implementation of gedcomS7","text":"One main characteristics wanted package hide complexity GEDCOM specification, try automate genealogical tasks time consuming manually. spent significant amount time writing code considering options data stored hood. one blog considered storing genealogical data relational table format easier deal , discounted quickly well suited nested data (list columns easy deal ). toyed idea using --shelf open source product like GRAMPS found awkward use wanted something complete control, taking full advantage strengths R. also considered using data structures suited type data, JSON graphs (using igraph data.tree package). However, discovered quite difficult representing structures GEDCOM specification satisfaction. preference Object Orientated approach, many applications use, none OOP solutions R quite fit bill. first serious attempt resulted tidyged packages gedcompendium. adopted dataframe tidyverse approach whilst work dependency-heavy required lot processing hood. release S7 presented ideal opportunity revisit creating OOP-based GEDCOM package R. Initial testing promising results continued building rest package, using updated GEDCOM 7.0 specification.","code":""},{"path":"https://jl5000.github.io/gedcomS7/articles/2_implementation.html","id":"the-gedcoms7-object","dir":"Articles","previous_headings":"","what":"The gedcomS7 object","title":"Implementation of gedcomS7","text":"main GEDCOM object S7 representation GEDCOM file: Properties GEDCOM object can accessed modified using @ operator, e.g. ease modification specific properties GEDCOM object wasn’t possible tidyged package. Properties don’t values either empty vectors, empty lists, NULL (depending property). Many properties take values particular gedcomS7 objects (lists , take one). ease use, often permitted provide simple atomic vector, gedcomS7 convert relevant objects automatically, object requires first property. example, @notes property can take simple character vector notes, converted list Note() objects. can access properties : properties also read-(calculated properties), @GEDCOM indicated capitals. exploration properties GEDCOM object beyond scope article, however implementation properties stored important.","code":"library(gedcomS7)  ged <- read_gedcom(\"remarriage1.ged\")  str(ged) #> <gedcomS7::GedcomS7> #>  @ header             : <gedcomS7::GedcomHeader> #>  .. @ gedcom_version    : chr \"7.0\" #>  .. @ ext_tags          : chr(0)  #>  .. @ source            : NULL #>  .. @ destination       : chr(0)  #>  .. @ creation_date     : <gedcomS7::DateExact> #>  .. .. @ year         : int 2025 #>  .. .. @ month        : int 5 #>  .. .. @ day          : int 1 #>  .. .. @ GEDCOM_STRING: chr \"1 MAY 2025\" #>  .. .. @ as_date      : Date[1:1], format: \"2025-05-01\" #>  .. @ creation_time     : chr(0)  #>  .. @ subm_xref         : chr(0)  #>  .. @ gedcom_copyright  : chr(0)  #>  .. @ default_language  : chr(0)  #>  .. @ default_place_form: chr(0)  #>  .. @ notes             : list() #>  .. @ note_xrefs        : chr(0)  #>  .. @ GEDCOM            : chr [1:4] \"0 HEAD\" \"1 GEDC\" \"2 VERS 7.0\" \"1 DATE 1 MAY 2025\" #>  @ records            : <gedcomS7::GedcomRecords> #>  .. @ prefixes    : Named chr [1:7] \"U\" \"I\" \"F\" \"S\" \"R\" \"M\" \"N\" #>  .. .. - attr(*, \"names\")= chr [1:7] \"SUBM\" \"INDI\" \"FAM\" \"SOUR\" ... #>  .. @ XREFS       :List of 7 #>  .. .. $ SUBM : chr(0)  #>  .. .. $ INDI : chr [1:3] \"@I1@\" \"@I2@\" \"@I3@\" #>  .. .. $ FAM  : chr [1:2] \"@F1@\" \"@F2@\" #>  .. .. $ SOUR : chr(0)  #>  .. .. $ REPO : chr(0)  #>  .. .. $ OBJE : chr(0)  #>  .. .. $ SNOTE: chr(0)  #>  .. @ XREFS_PRIV  :List of 7 #>  .. .. $ SUBM : chr(0)  #>  .. .. $ INDI : chr(0)  #>  .. .. $ FAM  : chr(0)  #>  .. .. $ SOUR : chr(0)  #>  .. .. $ REPO : chr(0)  #>  .. .. $ OBJE : chr(0)  #>  .. .. $ SNOTE: chr(0)  #>  .. @ XREFS_CONFID:List of 7 #>  .. .. $ SUBM : chr(0)  #>  .. .. $ INDI : chr(0)  #>  .. .. $ FAM  : chr(0)  #>  .. .. $ SOUR : chr(0)  #>  .. .. $ REPO : chr(0)  #>  .. .. $ OBJE : chr(0)  #>  .. .. $ SNOTE: chr(0)  #>  .. @ XREFS_NEXT  : Named chr [1:7] \"@U1@\" \"@I4@\" \"@F3@\" \"@S1@\" \"@R1@\" \"@M1@\" \"@N1@\" #>  .. .. - attr(*, \"names\")= chr [1:7] \"SUBM\" \"INDI\" \"FAM\" \"SOUR\" ... #>  .. @ RAW         : <gedcomS7::GedcomRecordsRaw> #>  .. .. @ SUBM : Named list() #>  .. .. @ INDI :List of 3 #>  .. .. .. $ @I1@: chr [1:5] \"0 @I1@ INDI\" \"1 NAME John Q /Public/\" \"1 SEX M\" \"1 FAMS @F1@\" ... #>  .. .. .. $ @I2@: chr [1:4] \"0 @I2@ INDI\" \"1 NAME Jane /Doe/\" \"1 SEX F\" \"1 FAMS @F1@\" #>  .. .. .. $ @I3@: chr [1:5] \"0 @I3@ INDI\" \"1 NAME Mary /Roe/\" \"1 DEAT\" \"2 DATE 1 MAR 1914\" ... #>  .. .. @ FAM  :List of 2 #>  .. .. .. $ @F1@: chr [1:9] \"0 @F1@ FAM\" \"1 HUSB @I1@\" \"1 WIFE @I2@\" \"1 MARR\" ... #>  .. .. .. $ @F2@: chr [1:5] \"0 @F2@ FAM\" \"1 HUSB @I1@\" \"1 WIFE @I3@\" \"1 MARR\" ... #>  .. .. @ SOUR : Named list() #>  .. .. @ REPO : Named list() #>  .. .. @ OBJE : Named list() #>  .. .. @ SNOTE: Named list() #>  @ update_change_dates: logi FALSE #>  @ add_creation_dates : logi FALSE #>  @ GEDCOM             : chr [1:33] \"0 HEAD\" \"1 GEDC\" \"2 VERS 7.0\" \"1 DATE 1 MAY 2025\" ... ged@header@default_language #> character(0) ged@header@default_language <- \"en\" ged@header@notes <- c(\"This is a note\", \"This is another note\") str(ged@header@notes) #> List of 2 #>  $ : <gedcomS7::Note> #>   ..@ text        : chr \"This is a note\" #>   ..@ language    : chr(0)  #>   ..@ media_type  : chr(0)  #>   ..@ translations: list() #>   ..@ citations   : list() #>   ..@ GEDCOM      : chr \"0 NOTE This is a note\" #>  $ : <gedcomS7::Note> #>   ..@ text        : chr \"This is another note\" #>   ..@ language    : chr(0)  #>   ..@ media_type  : chr(0)  #>   ..@ translations: list() #>   ..@ citations   : list() #>   ..@ GEDCOM      : chr \"0 NOTE This is another note\" ged@header@notes[[2]]@language <- \"en\""},{"path":"https://jl5000.github.io/gedcomS7/articles/2_implementation.html","id":"the-pushpull-paradigm","dir":"Articles","previous_headings":"","what":"The Push/Pull paradigm","title":"Implementation of gedcomS7","text":"GEDCOM file contain many thousands records containing information individuals, families, notes, sources, etc. Whilst storing records S7 objects within main GEDCOM object theoretically possible, practice quickly eats much memory rendering idea non-starter. reason, records stored raw form GEDCOM file lists character vectors @RAW property @records property. example, lines GEDCOM file first individual : can also reference records xref: want edit record, must first Pull GEDCOM object. takes copy record parses editable S7 object. can edit property Push back GEDCOM object: never attempt modify records character vector form directly GEDCOM object - additional checks automated tasks carried ensure self-consistency Push process. Removing records can achieved rm_records(). default, references record records replaced “@VOID@” reference. chosen, references removed altogether (potentially losing supplementary information).","code":"ged@records@RAW@INDI[[1]] #> [1] \"0 @I1@ INDI\"            \"1 NAME John Q /Public/\" \"1 SEX M\"                #> [4] \"1 FAMS @F1@\"            \"1 FAMS @F2@\" ged@records@RAW@INDI[[\"@I1@\"]] #> [1] \"0 @I1@ INDI\"            \"1 NAME John Q /Public/\" \"1 SEX M\"                #> [4] \"1 FAMS @F1@\"            \"1 FAMS @F2@\" john_public <- pull_record(ged, \"@I1@\")  str(john_public, max.level = 1) #> <gedcomS7::IndividualRecord> #>  @ XREF              : chr \"@I1@\" #>  @ confidential      : logi FALSE #>  @ locked            : logi FALSE #>  @ private           : logi FALSE #>  @ user_ids          : chr(0)  #>  @ unique_ids        : chr(0)  #>  @ ext_ids           : chr(0)  #>  @ note_xrefs        : chr(0)  #>  @ notes             : list() #>  @ citations         : list() #>  @ media_links       : list() #>  @ created           : NULL #>  @ updated           : NULL #>  @ RESTRICTIONS      : chr(0)  #>  @ GEDCOM_IDENTIFIERS: chr(0)  #>  @ pers_names        :List of 1 #>  @ sex               : chr \"M\" #>  @ facts             : list() #>  @ non_events        : list() #>  @ ordinances        : list() #>  @ fam_links_chil    : list() #>  @ fam_links_spou    :List of 2 #>  @ subm_xrefs        : chr(0)  #>  @ associations      : list() #>  @ alia_xrefs        : chr(0)  #>  @ anci_xrefs        : chr(0)  #>  @ desi_xrefs        : chr(0)  #>  @ PRIMARY_NAME      : chr \"John Q Public\" #>  @ ALL_NAMES         : chr \"John Q Public\" #>  @ BIRTH_DATE        : chr(0)  #>  @ BIRTH_PLACE       : chr(0)  #>  @ IS_ALIVE          : logi TRUE #>  @ DEATH_DATE        : chr(0)  #>  @ DEATH_PLACE       : chr(0)  #>  @ GEDCOM            : chr [1:5] \"0 @I1@ INDI\" \"1 NAME John Q /Public/\" \"1 SEX M\" ... john_public@notes <- \"John once had a dog called Rover\"  ged <- push_record(ged, john_public)  ged@records@RAW@INDI[[1]] #> [1] \"0 @I1@ INDI\"                             #> [2] \"1 NAME John Q /Public/\"                  #> [3] \"1 SEX M\"                                 #> [4] \"1 FAMS @F1@\"                             #> [5] \"1 FAMS @F2@\"                             #> [6] \"1 NOTE John once had a dog called Rover\""},{"path":"https://jl5000.github.io/gedcomS7/articles/2_implementation.html","id":"viewing-gedcoms7-objects","dir":"Articles","previous_headings":"","what":"Viewing gedcomS7 objects","title":"Implementation of gedcomS7","text":"two ways view contents gedcomS7 object - comprehensive use str() () show every property object . alternative use print() summary(), provide brief summary object (every property may displayed). example:","code":"ged #> GEDCOM file summary: #>   #> GEDCOM version:     7.0 #> Creation Date:      1 MAY 2025 #> Default Language:   en #> Source system:      <Undefined> #>  #> Copyright:          <Undefined> #>  #> Submitters:         0 #> Individuals:        3 #> Families:           2 #> Sources:            0 #> Repositories:       0 #> Multimedia:         0 #> Notes:              0 ged@header@notes #> [[1]] #> Note:           This is a note #>  #> Language:       <Undefined> #> Format:         <Undefined> #> Translations:   0 #> Citations:      0 #>  #> [[2]] #> Note:           This is another note #>  #> Language:       en #> Format:         <Undefined> #> Translations:   0 #> Citations:      0 john_public@pers_names #> [[1]] #> Personal Name:   John Q /Public/ #> Name Type:       <Undefined> #>  #> Translations:    0 #> Citations:       0 #> Notes:           0"},{"path":"https://jl5000.github.io/gedcomS7/articles/3_gedcom_creation.html","id":"creating-new-objects","dir":"Articles","previous_headings":"","what":"Creating new objects","title":"Creation of GEDCOM objects","text":"easiest way create GEDCOM object import existing GEDCOM file. example imports smallest legal GEDCOM file: GEDCOM object can also created using new_gedcom() function: Information gedcomS7 package (system/product creating file) given appropriate places, creation date, well default language (English). default language can changed new_gedcom() function. must character string language tags defined BCP 47 (must language parameter package). GEDCOM object R, can write valid GEDCOM file using write_gedcom(). filepath must end file extension .ged.","code":"library(gedcomS7)  ged <- read_gedcom(\"minimal70.ged\")  ged #> GEDCOM file summary: #>   #> GEDCOM version:     7.0 #> Creation Date:      1 MAY 2025 #> Default Language:   <Undefined> #> Source system:      <Undefined> #>  #> Copyright:          <Undefined> #>  #> Submitters:         0 #> Individuals:        0 #> Families:           0 #> Sources:            0 #> Repositories:       0 #> Multimedia:         0 #> Notes:              0 ged_new <- new_gedcom()  ged_new #> GEDCOM file summary: #>   #> GEDCOM version:     7.0 #> Creation Date:      1 MAY 2025 #> Default Language:   en #> Source:             gedcomS7 #> Source name:        The 'gedcomS7' package for the R language #>  #> Copyright:          <Undefined> #>  #> Submitters:         0 #> Individuals:        0 #> Families:           0 #> Sources:            0 #> Repositories:       0 #> Multimedia:         0 #> Notes:              0"},{"path":"https://jl5000.github.io/gedcomS7/articles/3_gedcom_creation.html","id":"gedcom-object-properties","dir":"Articles","previous_headings":"","what":"GEDCOM object properties","title":"Creation of GEDCOM objects","text":"properties GEDCOM object : properties main GEDCOM object either: Properties header @header property (metadata file whole). Properties summarise control cross-reference identifiers (xrefs) given records (e.g. @XREFS, @prefixes, @XREFS_NEXT); Lists records type (@RAW); allow user control whether creation/change dates added records pushed GEDCOM object (@update_change_dates @add_creation_dates) - don’t default can bloat files considerably; show GEDCOM file representation looks like (@GEDCOM). properties also read-, means calculated properties directly set. given capitals.","code":"str(ged, max.level = 1) #> <gedcomS7::GedcomS7> #>  @ header             : <gedcomS7::GedcomHeader> #>  .. @ gedcom_version    : chr \"7.0\" #>  .. @ ext_tags          : chr(0)  #>  .. @ source            : NULL #>  .. @ destination       : chr(0)  #>  .. @ creation_date     : <gedcomS7::DateExact> #>  .. .. @ year         : int 2025 #>  .. .. @ month        : int 5 #>  .. .. @ day          : int 1 #>  .. .. @ GEDCOM_STRING: chr \"1 MAY 2025\" #>  .. .. @ as_date      : Date[1:1], format: \"2025-05-01\" #>  .. @ creation_time     : chr(0)  #>  .. @ subm_xref         : chr(0)  #>  .. @ gedcom_copyright  : chr(0)  #>  .. @ default_language  : chr(0)  #>  .. @ default_place_form: chr(0)  #>  .. @ notes             : list() #>  .. @ note_xrefs        : chr(0)  #>  .. @ GEDCOM            : chr [1:4] \"0 HEAD\" \"1 GEDC\" \"2 VERS 7.0\" \"1 DATE 1 MAY 2025\" #>  @ records            : <gedcomS7::GedcomRecords> #>  .. @ prefixes    : Named chr [1:7] \"U\" \"I\" \"F\" \"S\" \"R\" \"M\" \"N\" #>  .. .. - attr(*, \"names\")= chr [1:7] \"SUBM\" \"INDI\" \"FAM\" \"SOUR\" ... #>  .. @ XREFS       :List of 7 #>  .. @ XREFS_PRIV  :List of 7 #>  .. @ XREFS_CONFID:List of 7 #>  .. @ XREFS_NEXT  : Named chr [1:7] \"@U1@\" \"@I1@\" \"@F1@\" \"@S1@\" \"@R1@\" \"@M1@\" \"@N1@\" #>  .. .. - attr(*, \"names\")= chr [1:7] \"SUBM\" \"INDI\" \"FAM\" \"SOUR\" ... #>  .. @ RAW         : <gedcomS7::GedcomRecordsRaw> #>  .. .. @ SUBM : Named list() #>  .. .. @ INDI : Named list() #>  .. .. @ FAM  : Named list() #>  .. .. @ SOUR : Named list() #>  .. .. @ REPO : Named list() #>  .. .. @ OBJE : Named list() #>  .. .. @ SNOTE: Named list() #>  @ update_change_dates: logi FALSE #>  @ add_creation_dates : logi FALSE #>  @ GEDCOM             : chr [1:5] \"0 HEAD\" \"1 GEDC\" \"2 VERS 7.0\" \"1 DATE 1 MAY 2025\" \"0 TRLR\""},{"path":"https://jl5000.github.io/gedcomS7/articles/4_records.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Records","text":"article introduces records, genealogical data stored organised GEDCOM file. several types records, subject subsequent articles, article focuses aspects (almost ) common. New records created using set *Record() functions, e.g.","code":"library(gedcomS7)  indi <- IndividualRecord()"},{"path":"https://jl5000.github.io/gedcomS7/articles/4_records.html","id":"restrictions","dir":"Articles","previous_headings":"","what":"Restrictions","title":"Records","text":"Records considered read-@locked property set TRUE. attempt pull locked record GEDCOM object editing, presented warning: two properties place restrictions records: @confidential @private. exact interpretation confidential private largely author file, allow two independent mechanisms excluding certain records export.","code":"indi@locked <- TRUE ged <- push_record(new_gedcom(), indi) #> New Individual record added with xref @I1@ indi <- pull_record(ged, \"@I1@\") #> Warning in pull_record(ged, \"@I1@\"): The record is locked. Ensure you have the #> record owner's permission before editing it and pushing it back to the GEDCOM #> object."},{"path":[]},{"path":"https://jl5000.github.io/gedcomS7/articles/4_records.html","id":"cross-references","dir":"Articles","previous_headings":"Identifiers","what":"Cross references","title":"Records","text":"GEDCOM records given unique identifiers known xrefs (cross-references) allow records link . alphanumeric strings surrounded ‘@’ symbols. Even though xref identifiers imported unchanged gedcomS7 package, systems create xref identifiers import. assume survive systems. However, always internally consistent. reason xref identifiers supposed exposed typical user. However rule can really applied GEDCOM software point--click user interface, rather one works interactively R console (S7 package allow hide property values). shiny app created, xrefs hidden user.","code":""},{"path":"https://jl5000.github.io/gedcomS7/articles/4_records.html","id":"summarising-and-controlling-xrefs","dir":"Articles","previous_headings":"Identifiers","what":"Summarising and controlling xrefs","title":"Records","text":"gedcomS7 package creates xrefs automatically creating pushing new records. creating new record given xref identifying standalone record yet pushed GEDCOM object: special xref indicates code new record existing one. important change . push GEDCOM object, assign proper xref: property ged@xref_prefixes named vector containing alphanumeric string (6 characters long) precede number given identify new records (7 types). vector must particular length specific names. ’ll import different GEDCOM file records : order records appear vector also dictate order records appear exported file. @records@XREFS property gives list record xrefs GEDCOM object, split record type: next xrefs type therefore :","code":"new_person <- IndividualRecord() new_person@XREF #> [1] \"@GEDCOMS7_ORPHAN@\" ged <- push_record(new_gedcom(), new_person) #> New Individual record added with xref @I1@ ged_max <- read_gedcom(\"maximal70.ged\")  ged_max@records@prefixes #>  SUBM  INDI   FAM  SOUR  REPO  OBJE SNOTE  #>   \"U\"   \"I\"   \"F\"   \"S\"   \"R\"   \"M\"   \"N\" ged_max@records@XREFS #> $SUBM #> [1] \"@U1@\" \"@U2@\" #>  #> $INDI #> [1] \"@I1@\" \"@I2@\" \"@I3@\" \"@I4@\" #>  #> $FAM #> [1] \"@F1@\" \"@F2@\" #>  #> $SOUR #> [1] \"@S1@\" \"@S2@\" #>  #> $REPO #> [1] \"@R1@\" \"@R2@\" #>  #> $OBJE #> [1] \"@O1@\" \"@O2@\" #>  #> $SNOTE #> [1] \"@N1@\" \"@N2@\" ged_max@records@XREFS_NEXT #>   SUBM   INDI    FAM   SOUR   REPO   OBJE  SNOTE  #> \"@U3@\" \"@I5@\" \"@F3@\" \"@S3@\" \"@R3@\" \"@M1@\" \"@N3@\""},{"path":"https://jl5000.github.io/gedcomS7/articles/4_records.html","id":"other-identifiers","dir":"Articles","previous_headings":"Identifiers","what":"Other identifiers","title":"Records","text":"well cross-reference identifiers, internally defined, also number identifiers can supplied record: User-defined identifiers (@user_ids) Globally unique identifiers (@unique_ids) Identifiers given external authority (@ext_ids) @user_ids must vector user reference numbers, example may record number within submitter’s automated manual system, may page position number pedigree chart. can optionally named vector, vector names describe reference number . ’s usually good idea provide . @unique_ids must take form Universally unique identifier (UUID). can generated uuid::UUIDgenerate(), e.g. @ext_ids must take form named vector names URI defining identifier. example, include reference individual’s Find Grave’s page, supply c(\"https://www.findagrave.com/memorial\" = \"1075\"), interpreted https://www.findagrave.com/memorial/1075.","code":"uuid::UUIDgenerate(n = 1) #> [1] \"60bb58e6-7874-4456-9fc1-e39fd2327c80\""},{"path":"https://jl5000.github.io/gedcomS7/articles/4_records.html","id":"referencing-other-records","dir":"Articles","previous_headings":"","what":"Referencing other records","title":"Records","text":"One important aspects record provenance data within . can provided via linking evidence (sources) multimedia. noted linkages can provided record level, also granular levels; example, can provide source citations personal name individual.","code":""},{"path":"https://jl5000.github.io/gedcomS7/articles/4_records.html","id":"source-citations","dir":"Articles","previous_headings":"Referencing other records","what":"Source citations","title":"Records","text":"Linkages Source records (known source citations) among important aspects GEDCOM file. accessed via @citations property. takes list SourceCitation() objects. can provide single object, even character vector Source record xrefs, converted list SourceCitation() objects. Without providing information can see default xref “@VOID@”. special xref value indicates record link . case, information provided object , particularly @property. just default value - record, put xref .","code":"SourceCitation() |>    str() #> <gedcomS7::SourceCitation> #>  @ sour_xref  : chr \"@VOID@\" #>  @ where      : chr(0)  #>  @ date       : chr(0)  #>  @ source_text: list() #>  @ fact_type  : chr(0)  #>  @ fact_phrase: chr(0)  #>  @ role       : chr(0)  #>  @ role_phrase: chr(0)  #>  @ certainty  : chr(0)  #>  @ media_links: list() #>  @ note_xrefs : chr(0)  #>  @ notes      : list() #>  @ GEDCOM     : chr \"0 SOUR @VOID@\""},{"path":"https://jl5000.github.io/gedcomS7/articles/4_records.html","id":"multimedia-links","dir":"Articles","previous_headings":"Referencing other records","what":"Multimedia links","title":"Records","text":"Links Multimedia records accessed via @media_links property. Similar source citations, can take character vector Multimedia record xrefs, MediaLink() object, list . , @VOID@ xref given default retained, @title provided (title given override title given Multimedia record one linked ). remaining properties allow specify cropped region image.","code":"MediaLink() |>    str() #> <gedcomS7::MediaLink> #>  @ media_xref: chr \"@VOID@\" #>  @ title     : chr(0)  #>  @ top       : int(0)  #>  @ left      : int(0)  #>  @ height    : int(0)  #>  @ width     : int(0)  #>  @ GEDCOM    : chr \"0 OBJE @VOID@\""},{"path":"https://jl5000.github.io/gedcomS7/articles/4_records.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Records","text":"records (apart Note records) allow attach many free text notes wish. note applies many places best create Note record can referenced everywhere needed @note_xrefs, otherwise use @notes property. property can take notes number ways. simplest way via character vector. Another way via Note() object, also allows define properties note language media type. Alternatively, can supply list can contain number character Note elements: remember properties can take multiple elements, can append new values existing ones, otherwise overwritten:","code":"indi <- IndividualRecord()  indi@notes <- \"This is a single note\"  indi@notes <- c(\"This is a note\", \"This is an another note\")  indi@notes <- Note(text = \"This is a single note using a Note object\",                    media_type = \"text/plain\") indi@notes <- list(   Note(text = \"This is one of a number of <b>Note<\/b> objects. This one is HTML.\",        media_type = \"text/html\"),   Note(text = \"Esta es una nota\",        language = \"es\",        media_type = \"text/plain\"),   \"This one is a character note\" ) indi@notes <- append(   indi@notes,   list(     \"This is an appended note\",     Note(\"This is another appended note\")   ) )  indi@notes #> [[1]] #> Note:           This is one of a number of <b>Note<\/b> objects. This  #>                 one is HTML. #>  #> Language:       <Undefined> #> Format:         text/html #> Translations:   0 #> Citations:      0 #>  #> [[2]] #> Note:           Esta es una nota #>  #> Language:       es #> Format:         text/plain #> Translations:   0 #> Citations:      0 #>  #> [[3]] #> Note:           This one is a character note #>  #> Language:       <Undefined> #> Format:         <Undefined> #> Translations:   0 #> Citations:      0 #>  #> [[4]] #> Note:           This is an appended note #>  #> Language:       <Undefined> #> Format:         <Undefined> #> Translations:   0 #> Citations:      0 #>  #> [[5]] #> Note:           This is another appended note #>  #> Language:       <Undefined> #> Format:         <Undefined> #> Translations:   0 #> Citations:      0"},{"path":"https://jl5000.github.io/gedcomS7/articles/4_records.html","id":"creationmodification-dates","dir":"Articles","previous_headings":"","what":"Creation/modification dates","title":"Records","text":"option recording record created changed. push record GEDCOM object, record creation/change dates depending values @add_creation_dates @update_change_dates (FALSE default): can add time /notes dates, ’s probably overkill.","code":"ged <- new_gedcom() ged@update_change_dates <- TRUE ged@add_creation_dates <- TRUE  new_record <- IndividualRecord() ged <- push_record(ged, new_record) #> New Individual record added with xref @I1@  # Extract record with creation/change dates added new_record <- pull_record(ged, \"@I1@\") new_record@created #> Created:       1 MAY 2025 new_record@updated #> Changed:       1 MAY 2025"},{"path":"https://jl5000.github.io/gedcomS7/articles/5_people_relationships.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Records for defining people and relationships","text":"Information people relationships stored Individual records Family records. focus Individual records first, move Family records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/articles/5_people_relationships.html","id":"individuals","dir":"Articles","previous_headings":"","what":"Individuals","title":"Records for defining people and relationships","text":"sex individual can specified sex property, single letter: M(ale), F(emale), (Interse)X, U(nknown). sex specified, value “U” used.","code":"library(gedcomS7)  anakin <- IndividualRecord(   sex = \"M\" )"},{"path":"https://jl5000.github.io/gedcomS7/articles/5_people_relationships.html","id":"names","dir":"Articles","previous_headings":"Individuals","what":"Names","title":"Records for defining people and relationships","text":"quick dirty way adding names character vector (enclosing forward slashes GEDCOM’s way indicating surname): Individuals can one name. can different kinds name birth name adoptive name, uncertainty, variants based conflicting evidence sources. also ability provide translated variants names. Given complexity, personal name usually defined using PersonalName() object (list ): example defined two names list PersonalName() objects. “Darth” enclosed forward slashes closest thing family name Sith Lords! Name types can also given (optional free text phrase) must take one values val_name_types(): names preferably provided set name pieces, specifying given name, surname, nickname, etc. can also define name translation PersonalNameTran() list . also opportunities record notes source citations name defined. Generally, names arranged order importance; first name primary name (usually birth name). added Individual record, property @PRIMARY_NAME provide primary (first) name simple character string, @ALL_NAMES provide names simple character vector.","code":"anakin@pers_names <- c(\"Anakin /Skywalker/\", \"Darth Vader\") #> Warning in (function (self, value) : Did you forget to enclose the surname in #> forward slashes?: Darth Vader anakin@pers_names <- list(   PersonalName(pers_name = \"Anakin /Skywalker/\",                name_type = \"BIRTH\",                name_pieces = PersonalNamePieces(given = \"Anakin\",                                                 surname = \"Skywalker\"),                notes = \"He had this name since the death of Mace Windu.\"),   PersonalName(pers_name = \"/Darth/ Vader\",                name_type = \"AKA\",                type_phrase = \"Dark Side name\",                name_translations = PersonalNameTran(pers_name = \"Dark Father\",                                                     language = \"en\")) )  anakin@pers_names #> [[1]] #> Personal Name:   Anakin /Skywalker/ #> Name Type:       BIRTH #>  #> Translations:    0 #> Citations:       0 #> Notes:           1 #>  #> [[2]] #> Personal Name:   /Darth/ Vader #> Name Type:       AKA (Dark Side name) #>  #> Translations:    1 #> Citations:       0 #> Notes:           0 val_name_types() #> [1] \"AKA\"          \"BIRTH\"        \"IMMIGRANT\"    \"MAIDEN\"       \"MARRIED\"      #> [6] \"PROFESSIONAL\" \"OTHER\" anakin@PRIMARY_NAME #> [1] \"Anakin Skywalker\" anakin@ALL_NAMES #> [1] \"Anakin Skywalker\" \"Darth Vader\""},{"path":"https://jl5000.github.io/gedcomS7/articles/5_people_relationships.html","id":"facts","dir":"Articles","previous_headings":"Individuals","what":"Facts","title":"Records for defining people and relationships","text":"Attributes events associated individual, birth death, accessed @facts property. can assigned IndividualEvent() IndividualAttribute() object (list ). objects allow define fact, together associated date, cause, place/address, age individual fact applied (among aspects). full list fact types can created given : example , add 4 facts Anakin: add generic event (EVEN) attribute (FACT), well defining fact value, must also add fact description provides classification: can also assert individual never experienced event via @non_events property. takes NonEvent() object list . non-event date period provided asserts event never happened period. date period provided, asserts event never happened . can see summary facts associated individual df_indi_facts() function.","code":"val_individual_attribute_types(inc_generic = TRUE) #>                  Caste   Physical description   Academic achievement  #>                 \"CAST\"                 \"DSCR\"                 \"EDUC\"  #>              ID number            Nationality     Number of children  #>                 \"IDNO\"                 \"NATI\"                 \"NCHI\"  #>    Number of marriages             Occupation               Property  #>                  \"NMR\"                 \"OCCU\"                 \"PROP\"  #>               Religion              Residence Social security number  #>                 \"RELI\"                 \"RESI\"                  \"SSN\"  #>         Nobility title        Other attribute  #>                 \"TITL\"                 \"FACT\" val_individual_event_types(inc_generic = TRUE) #>          Adoption           Baptism       Bar-mitzvah       Bas-mitzvah  #>            \"ADOP\"            \"BAPM\"            \"BARM\"            \"BASM\"  #>             Birth          Blessing            Burial            Census  #>            \"BIRT\"            \"BLES\"            \"BURI\"            \"CENS\"  #>       Christening Adult christening      Confirmation         Cremation  #>             \"CHR\"            \"CHRA\"            \"CONF\"            \"CREM\"  #>             Death        Emigration   First communion        Graduation  #>            \"DEAT\"            \"EMIG\"            \"FCOM\"            \"GRAD\"  #>       Immigration    Naturalization        Ordination           Probate  #>            \"IMMI\"            \"NATU\"            \"ORDN\"            \"PROB\"  #>        Retirement              Will       Other event  #>            \"RETI\"            \"WILL\"            \"EVEN\" anakin@facts <- list(   IndividualAttribute(fact_type = \"TITL\",                       fact_val = \"Lord\",                       notes = \"When he was Darth Vader\"),   IndividualAttribute(fact_type = \"NMR\",                       fact_val = \"1\"),   IndividualEvent(fact_type = \"BIRT\",                   place = \"Tatooine\"),   IndividualEvent(fact_type = \"DEAT\",                   place = \"Death Star\",                   cause = \"Injuries sustained from the Emperor's lightning\") ) anakin@facts <- append(   anakin@facts,   IndividualEvent(fact_type = \"EVEN\",                   fact_val = \"Lost legs\",                   fact_desc = \"Injury\",                   cause = \"Lightsaber duel with Obi-Wan Kenobi\",                   place = \"Mustafar\") ) anakin@non_events <- NonEvent(\"BARM\") skywalkers <- new_gedcom() |>    push_record(anakin) #> New Individual record added with xref @I1@  df_indi_facts(skywalkers, \"@I1@\") #>   xref                type       val   desc date      place age #> 1 @I1@      Nobility title      Lord                            #> 2 @I1@ Number of marriages         1                            #> 3 @I1@               Birth                         Tatooine     #> 4 @I1@               Death                       Death Star     #> 5 @I1@         Other event Lost legs Injury        Mustafar"},{"path":"https://jl5000.github.io/gedcomS7/articles/5_people_relationships.html","id":"family-relationships","dir":"Articles","previous_headings":"Individuals","what":"Family relationships","title":"Records for defining people and relationships","text":"One important linkages Individual record Family records. individual can either linked family spouse child. create new empty Family record GEDCOM object skywalkers, link Anakin family spouse. push record GEDCOM object, automatically recognise new linkage appeared, update Family record reflect : Creating linkages individuals families way can get quite cumbersome, suite helper functions define multiple relationships described next section.","code":"skywalkers <- push_record(skywalkers, FamilyRecord()) #> New Family record added with xref @F1@  anakin <- pull_record(skywalkers, \"@I1@\") anakin@fam_links_spou <- FamilyLinkSpouse(\"@F1@\") skywalkers <- push_record(skywalkers, anakin)  skywalkers@records@RAW@FAM[[\"@F1@\"]] #> [1] \"0 @F1@ FAM\"  \"1 HUSB @I1@\""},{"path":[]},{"path":"https://jl5000.github.io/gedcomS7/articles/5_people_relationships.html","id":"members","dir":"Articles","previous_headings":"Families","what":"Members","title":"Records for defining people and relationships","text":"key properties Family record defining members family (@husb_xref, @wife_xref, @chil_xrefs). usually given xref links Individual records. Individual record value “@VOID@” can used. However, need provide named vector describing person, e.g. named vector can used even xref Individual record provided. Family records need describe traditional marriage unions - can describe non-marital relationships -sex relationships. Children also biological. parameter names legacy previous versions GEDCOM specification, yet updated.","code":"leia_han <- FamilyRecord()  leia_han@chil_xrefs <- c(\"Ben Solo\" = \"@VOID@\")"},{"path":"https://jl5000.github.io/gedcomS7/articles/5_people_relationships.html","id":"automation","dir":"Articles","previous_headings":"Families","what":"Automation","title":"Records for defining people and relationships","text":"suite helper functions created allow add spouse, parents, children, siblings single function call. create records linkages automatically, can fill details later. help keep track, functions also allow specify sexes /names added. example, add spouse two children Anakin: functions allow quite lot automation. add_spouse() function automatically creates Individual record Padme sex name, existing Family record created well. add_children() function creates Individual record sexes defined. Names can optionally provided; surnames included names (indicated forward slashes) taken father (mother father). add_parents() add_siblings() functions work similar way.","code":"skywalkers <- skywalkers |>    add_spouse(\"@I1@\", sex = \"F\", spou_name = \"Padme /Amidala/\",              fam_xref = \"@F1@\") |>    add_children(\"@F1@\", sexes = \"MF\", chil_names = c(\"Luke\", \"Leia\")) #> New Individual record added with xref @I2@ #> New Individual record added with xref @I3@ #> New Individual record added with xref @I4@"},{"path":"https://jl5000.github.io/gedcomS7/articles/5_people_relationships.html","id":"facts-1","dir":"Articles","previous_headings":"Families","what":"Facts","title":"Records for defining people and relationships","text":"Like Individual records, Family records can also attributes events associated , @facts property. can assigned FamilyEvent() FamilyAttribute() object (list ). full list fact types can created given : Alternatively, fact_rules_df() function provides dataframe fact types rules surrounding population @fact_val @fact_desc properties. can filter table providing search string function: types fact; census residence, can apply Individuals Families. highly recommended use facts families, individuals. may intuitively efficient define event entire family, GEDCOM parsers can difficulty , defining facts individual separately recommended. Despite name, Family records actually union two people, rather family unit whole, remaining events related marriages divorces. Like Individual records, events didn’t happen family can defined @non_events property.","code":"val_family_attribute_types(inc_generic = TRUE) #> Number of children          Residence    Other attribute  #>             \"NCHI\"             \"RESI\"             \"FACT\" val_family_event_types(inc_generic = TRUE) #>           Annulment              Census             Divorce       Divorce filed  #>              \"ANUL\"              \"CENS\"               \"DIV\"              \"DIVF\"  #>          Engagement      Marriage banns   Marriage contract    Marriage license  #>              \"ENGA\"              \"MARB\"              \"MARC\"              \"MARL\"  #>            Marriage Marriage settlement         Other event  #>              \"MARR\"              \"MARS\"              \"EVEN\" fact_rules_df(\"eve|chr\") #>               fact_name fact_type individual family      fact fact_val_required #> 9           Christening       CHR       TRUE  FALSE     Event             FALSE #> 10    Adult christening      CHRA       TRUE  FALSE     Event             FALSE #> 23          Other event      EVEN       TRUE   TRUE     Event              TRUE #> 35 Academic achievement      EDUC       TRUE  FALSE Attribute              TRUE #>    fact_val fact_desc_required #> 9         Y              FALSE #> 10        Y              FALSE #> 23      Any               TRUE #> 35      Any              FALSE"},{"path":[]},{"path":"https://jl5000.github.io/gedcomS7/articles/5_people_relationships.html","id":"individual-records","dir":"Articles","previous_headings":"Links to other records","what":"Individual records","title":"Records for defining people and relationships","text":"alternative way recording alter ego Anakin Skywalker create separate Individual record Darth Vader, link together. achievable via @alia_xrefs property. Whether include one-way, mutual link . Individuals families may also associations individuals aren’t necessarily familial. can record @associations property. property takes Association() object list . object void xref pointer default, person may Individual record, case (examples ), @indi_phrase must given containing name. @relation_is value mandatory. @relation_is property must take one following values. “”, @relation_phrase must given.","code":"anakin <- pull_record(skywalkers, \"@I1@\")  anakin@associations <- list(   Association(indi_phrase = \"Obi-Wan Kenobi\",               relation_is = \"OTHER\",               relation_phrase = \"Master\",               notes = \"While he was Anakin Skywalker\"),   Association(indi_phrase = \"Emperor Palpatine\",               relation_is = \"OTHER\",               relation_phrase = \"Master\",               notes = \"While he was Darth Vader\") ) val_roles() #>              Child Religious official             Father             Friend  #>             \"CHIL\"           \"CLERGY\"             \"FATH\"           \"FRIEND\"  #>          Godparent            Husband             Mother           Multiple  #>             \"GODP\"             \"HUSB\"             \"MOTH\"         \"MULTIPLE\"  #>           Neighbor         Officiator             Parent             Spouse  #>            \"NGHBR\"       \"OFFICIATOR\"           \"PARENT\"             \"SPOU\"  #>               Wife            Witness              Other  #>             \"WIFE\"             \"WITN\"            \"OTHER\""},{"path":"https://jl5000.github.io/gedcomS7/articles/5_people_relationships.html","id":"submitter-records","dir":"Articles","previous_headings":"Links to other records","what":"Submitter records","title":"Records for defining people and relationships","text":"can also link Submitter records following ways: contributed information individual/family (@subm_xrefs); interest individual’s ancestors (@anci_xrefs); interest individual’s descendants (@desi_xrefs).","code":""},{"path":"https://jl5000.github.io/gedcomS7/articles/6_supporting_records.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Records for evidence and supporting information","text":"Whilst Individual Family records describe people relationships, remaining record types describe evidence supporting information. Specifically : Source records information taken ; Repository records source records can found; Multimedia records describe documents like photos videos; Submitter records contain information people provided information (.e. human sources); Note records informal notes can referenced multiple places.","code":""},{"path":"https://jl5000.github.io/gedcomS7/articles/6_supporting_records.html","id":"source-records","dir":"Articles","previous_headings":"","what":"Source records","title":"Records for evidence and supporting information","text":"Source records one important types record GEDCOM file. provide evidence assertions made file, require careful management. @facts_recorded property can optionally provided, containing facts, time periods, jurisdictions source covers. example source covers births, marriages, deaths England Wales period 1900 2000. deaths covered 1980, provide list two FactsRecorded() objects - one births marriages, deaths. @repo_citations property contains links repository records details source book can found. art deciding level granularity express sources. generally two approaches: ‘Source splitters’ specific document Source record; ‘Source lumpers’ entire class documents one Source record. best approach depend kind source document, hybrid approach recommended. entire topic won’t dwell .","code":"library(gedcomS7)  birth_source <- SourceRecord(   facts_recorded = FactsRecorded(     fact_types = \"BIRT, MARR, DEAT\",     date_period = DatePeriod(\"1900\", \"2000\"),     territory = \"England and Wales\"   ),   originator = \"General Register Office\",   full_title = \"BMD Register Book 1900-2000\",   source_text = \"This might contain a relevant extract from the register\",   repo_citations = list(     \"@R1@\",     RepositoryCitation(\"@R2@\", call_numbers = \"ABC123\")   ) )"},{"path":"https://jl5000.github.io/gedcomS7/articles/6_supporting_records.html","id":"repository-records","dir":"Articles","previous_headings":"","what":"Repository records","title":"Records for evidence and supporting information","text":"repository archive (library) containing source documents.","code":"library_repo <- RepositoryRecord(   repo_name = \"A library\",   address = Address(     full = \"123 Library Road; Turin Village; Manchester; New Hampshire; 123456; United States of America\",     city = \"Manchester\",     state = \"New Hampshire\",     postal_code = \"123456\",     country = \"United States of America\"   ),   phone_numbers = c(\"645-618-6578\", \"645-618-6570\", \"645-618-6577\"),   emails = c(\"enquiries@alibrary.com\", \"enquiries2@alibrary.com\"),   faxes  = \"0947393\",   web_pages = \"www.alibrary.com\" )"},{"path":"https://jl5000.github.io/gedcomS7/articles/6_supporting_records.html","id":"multimedia-records","dir":"Articles","previous_headings":"","what":"Multimedia records","title":"Records for evidence and supporting information","text":"Multimedia records used define single multimedia object document photo. primary property record @files property takes MediaFile() object (list group media files grouped together). @media_type describes encoding file, defined RFC 2045. registry file types maintained . See GEDCOM specification details. @medium property must take one following values:","code":"my_family_photo <- MediaRecord(   files = MediaFile(     location = \"C:/my_files/photo.jpg\",     title = \"My Family Photo\",     media_type = \"image/jpeg\",     medium = \"PHOTO\"   ) ) unname(val_medium_types()) #>  [1] \"AUDIO\"      \"BOOK\"       \"CARD\"       \"ELECTRONIC\" \"FICHE\"      #>  [6] \"FILM\"       \"MAGAZINE\"   \"MANUSCRIPT\" \"MAP\"        \"NEWSPAPER\"  #> [11] \"PHOTO\"      \"TOMBSTONE\"  \"VIDEO\"      \"OTHER\""},{"path":"https://jl5000.github.io/gedcomS7/articles/6_supporting_records.html","id":"submitter-records","dir":"Articles","previous_headings":"","what":"Submitter records","title":"Records for evidence and supporting information","text":"Submitters people contributed information GEDCOM file. main properties records names contact details people.","code":"informant <- SubmitterRecord(   subm_name = \"Joe Bloggs\",   address = Address(\"2599 Priory Road; Wells; Somerset; England; BA5 1SH\") )"},{"path":"https://jl5000.github.io/gedcomS7/articles/6_supporting_records.html","id":"note-records","dir":"Articles","previous_headings":"","what":"Note records","title":"Records for evidence and supporting information","text":"Note records allow make notes file reference multiple places. @media_type can also type “text/html” @text property contains HTML markup (e.g. new line characters).","code":"spelling_note <- NoteRecord(   text = \"Lindsay has alternative spellings of 'Lindsey' and 'Linsey'\",   media_type = \"text/plain\" )"},{"path":"https://jl5000.github.io/gedcomS7/articles/7_dates.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Date types","text":"expect genealogical data format, dates form major part information contained within . Within gedcomS7 number different date types can defined, helper function type ensure formatted correctly.","code":""},{"path":"https://jl5000.github.io/gedcomS7/articles/7_dates.html","id":"exact-dates","dir":"Articles","previous_headings":"","what":"Exact dates","title":"Date types","text":"Dates occur specific defined date defined using DateExact(): well GEDCOM formatted strings (printed also accessed @GEDCOM_STRING property), date object can also expressed date type:","code":"library(gedcomS7)  DateExact(1999, 7, 5) #> Date:     5 JUL 1999 DateExact(1956, 12, 8) #> Date:     8 DEC 1956 DateExact(2008, 4, 1) #> Date:     1 APR 2008 DateExact(2008, 4, 1)@as_date #> [1] \"2008-04-01\""},{"path":"https://jl5000.github.io/gedcomS7/articles/7_dates.html","id":"calendar-dates","dir":"Articles","previous_headings":"","what":"Calendar dates","title":"Date types","text":"Calendar dates common type date used. can used create specific dates like DateExact(), underpin date types described . can created using DateGregorian(): Years Common Era can defined using bce parameter: calendars apart Gregorian calendar supported package.","code":"DateGregorian(year = 1999, month = 4, day = 5) #> Date:     5 APR 1999 DateGregorian(year = 1999, month = 4) #> Date:     APR 1999 DateGregorian(year = 1999) #> Date:     1999 DateGregorian(year = 105, bce = TRUE) #> Date:     105 BCE"},{"path":"https://jl5000.github.io/gedcomS7/articles/7_dates.html","id":"approximate-dates","dir":"Articles","previous_headings":"","what":"Approximate dates","title":"Date types","text":"Approximate dates (.e. expressing uncertainty) use qualifiers ‘’, ‘calculated’, ‘estimated’ conjunction DateGregorian() object:","code":"DateGregorian(year = 1999, month = 4, day = 5) |> DateApprox(about = TRUE) #> Date:     ABT 5 APR 1999 DateGregorian(year = 1999, month = 4, day = 5) |> DateApprox(calc = TRUE) #> Date:     CAL 5 APR 1999 DateGregorian(year = 1999, month = 4, day = 5) |> DateApprox(est = TRUE) #> Date:     EST 5 APR 1999"},{"path":"https://jl5000.github.io/gedcomS7/articles/7_dates.html","id":"date-periods","dir":"Articles","previous_headings":"","what":"Date periods","title":"Date types","text":"Date periods can take one two DateGregorian() objects: Providing one date gives semi-infinite period.","code":"DatePeriod(start_date = DateGregorian(1956, 7, 26),            end_date = DateGregorian(1956, 9, 15)) #> Date:     FROM 26 JUL 1956 TO 15 SEP 1956 DatePeriod(start_date = DateGregorian(1956, 7, 26)) #> Date:     FROM 26 JUL 1956 DatePeriod(end_date = DateGregorian(1956, 9, 15)) #> Date:     TO 15 SEP 1956"},{"path":"https://jl5000.github.io/gedcomS7/articles/7_dates.html","id":"date-ranges","dir":"Articles","previous_headings":"","what":"Date ranges","title":"Date types","text":"Date ranges can defined using DateRange(). Unlike DatePeriod(), describe event occurred rather duration. ’s important note approximate dates used date ranges date periods.","code":"DateRange(start_date = DateGregorian(1956, 7, 26),            end_date = DateGregorian(1956, 9, 15)) #> Date:     BET 26 JUL 1956 AND 15 SEP 1956 DateRange(start_date = DateGregorian(1956, 7, 26)) #> Date:     AFT 26 JUL 1956 DateRange(end_date = DateGregorian(1956, 9, 15)) #> Date:     BEF 15 SEP 1956"},{"path":"https://jl5000.github.io/gedcomS7/articles/7_dates.html","id":"date-values","dir":"Articles","previous_headings":"","what":"Date values","title":"Date types","text":"Date values can defined DateValue() higher level date expression elementary values given . calendar/approximate/range/period date can used conjunction date phrase (free text) time. Instead single values, GEDCOM substructures: ’s also possible define DateValue phrase: DateSorting() object similar DateValue() can take Calendar dates used sorting.","code":"my_date <- DateValue(   date = DateGregorian(year = 1999, month = 4, day = 5),   date_phrase = \"Someone's birthday\",   time = Time(hour = 13, minute = 28, second = 57) )  my_date #> Date:     5 APR 1999 13:28:57Z (Someone's birthday)  my_date@GEDCOM #> [1] \"0 DATE 5 APR 1999\"           \"1 TIME 13:28:57Z\"            #> [3] \"1 PHRASE Someone's birthday\" DateValue(date = \"\", date_phrase = \"March 14th\")@GEDCOM #> [1] \"0 DATE\"              \"1 PHRASE March 14th\""},{"path":"https://jl5000.github.io/gedcomS7/articles/8_finding_records.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Finding related records","text":"can find records using family get_*() functions. finding familial relations individual. illustrate functionality using family consisting three generations: pair parents single child (named ‘Main Person’). person forms two separate family groups two spouses, resulting two children.  Image courtesy Topola Genealogy Viewer (great tool visualising GEDCOM files!)","code":"library(gedcomS7)  main_person <- IndividualRecord(pers_names = \"Main Person\", sex = \"M\")  three_gen <- new_gedcom() |>    push_record(main_person) |>    add_parents(\"@I1@\", fath_name = \"Parent 1\", moth_name = \"Parent 2\") |>    add_spouse(\"@I1@\", spou_name = \"Spouse 1\") |>    add_spouse(\"@I1@\", spou_name = \"Spouse 2\") |>    add_children(\"@F2@\", sexes = \"MM\", chil_names = c(\"Son 1\", \"Son 2\")) |>    add_children(\"@F3@\", sexes = \"FF\", chil_names = c(\"Daughter 1\", \"Daughter 2\"))  #> New Individual record added with xref @I1@ #> New Family record added with xref @F1@ #> New Individual record added with xref @I2@ #> New Individual record added with xref @I3@ #> New Individual record added with xref @I4@ #> New Family record added with xref @F2@ #> New Individual record added with xref @I5@ #> New Family record added with xref @F3@ #> New Individual record added with xref @I6@ #> New Individual record added with xref @I7@ #> New Individual record added with xref @I8@ #> New Individual record added with xref @I9@"},{"path":"https://jl5000.github.io/gedcomS7/articles/8_finding_records.html","id":"immediate-relations","dir":"Articles","previous_headings":"","what":"Immediate relations","title":"Finding related records","text":"examples illustrate functions. functions return xrefs, helper function created convert xrefs Individual records people’s names. Many functions include pedigrees parameter allows specify types relationships allowed (allowed default, specify “BIRTH” want biological). Allowed values pedigrees . add adopted child family “@F3@” can see difference parameter makes:","code":"main_person <- \"@I1@\"  # Helper to convert xrefs to names xref_to_name <- \\(x) unlist(lapply(x, \\(xref) pull_record(three_gen, xref)@PRIMARY_NAME))  get_indi_partners(three_gen, main_person) |> xref_to_name() #> [1] \"Spouse 1\" \"Spouse 2\"  get_indi_parents(three_gen, main_person) |> xref_to_name() #> [1] \"Parent 1\" \"Parent 2\"  get_indi_children(three_gen, main_person) |> xref_to_name() #> [1] \"Son 1\"      \"Son 2\"      \"Daughter 1\" \"Daughter 2\"  get_indi_siblings(three_gen, \"@I6@\") |> xref_to_name() #> [1] \"Son 2\"  get_indi_siblings(three_gen, \"@I6@\", inc_half = TRUE) |> xref_to_name() #> [1] \"Son 2\"      \"Daughter 1\" \"Daughter 2\"  get_fam_as_child(three_gen, main_person) #> [1] \"@F1@\"  get_fam_as_spouse(three_gen, main_person) #> [1] \"@F2@\" \"@F3@\"  get_fam_partners(three_gen, \"@F1@\") #> [1] \"@I2@\" \"@I3@\"  get_fam_children(three_gen, \"@F2@\") #> [1] \"@I6@\" \"@I7@\" unname(val_pedigree_types()) #> [1] \"BIRTH\"   \"ADOPTED\" \"FOSTER\"  \"SEALING\" \"OTHER\" adopted_child <- IndividualRecord(   pers_names = \"Adopted child\",   fam_links_chil = FamilyLinkChild(fam_xref = \"@F3@\", pedigree = \"ADOPTED\") )  three_gen <- push_record(three_gen, adopted_child) #> New Individual record added with xref @I10@  get_fam_children(three_gen, \"@F3@\") |> xref_to_name() #> [1] \"Daughter 1\"    \"Daughter 2\"    \"Adopted child\" get_fam_children(three_gen, \"@F3@\", pedigrees = \"BIRTH\") |> xref_to_name() #> [1] \"Daughter 1\" \"Daughter 2\" get_fam_children(three_gen, \"@F3@\", pedigrees = \"ADOPTED\") |> xref_to_name() #> [1] \"Adopted child\""},{"path":"https://jl5000.github.io/gedcomS7/articles/8_finding_records.html","id":"distant-relations","dir":"Articles","previous_headings":"","what":"Distant relations","title":"Finding related records","text":"One sophisticated features gedcomS7 ability manipulate entire branches tree. can use get_descendants() function identify descendants Main Person. default exclude individual, spouses, associated family records: Setting inc_part = TRUE include partners descendants, descendants’ partners: Setting inc_indi = TRUE include individual: Setting inc_fam = TRUE include individual’s families spouse/child, descendants’ families: can deal ancestors similar way using get_ancestors() function. also get_indi_cousins() function allows find types cousin individual.","code":"get_descendants(three_gen, \"@I2@\") # Parent 1 #> [1] \"@I1@\"  \"@I6@\"  \"@I7@\"  \"@I8@\"  \"@I9@\"  \"@I10@\" get_descendants(three_gen, \"@I2@\", inc_part = TRUE) #> [1] \"@I3@\"  \"@I4@\"  \"@I5@\"  \"@I1@\"  \"@I6@\"  \"@I7@\"  \"@I8@\"  \"@I9@\"  \"@I10@\" get_descendants(three_gen, \"@I2@\", inc_indi = TRUE) #> [1] \"@I2@\"  \"@I1@\"  \"@I6@\"  \"@I7@\"  \"@I8@\"  \"@I9@\"  \"@I10@\" get_descendants(three_gen, \"@I2@\", inc_fam = TRUE) #> [1] \"@F1@\"  \"@F2@\"  \"@F3@\"  \"@I1@\"  \"@I6@\"  \"@I7@\"  \"@I8@\"  \"@I9@\"  \"@I10@\""},{"path":"https://jl5000.github.io/gedcomS7/articles/8_finding_records.html","id":"supporting-records","dir":"Articles","previous_headings":"","what":"Supporting records","title":"Finding related records","text":"Whilst functions focus Individual Family records, get_supporting_recs() function identifies types records referenced set records. example, create three different types supporting record; media, repository, source. source record linked media repository record. add link source record record Main Person. Now, get supporting records, retrieves record directly referenced Main Person’s record, also recognises downstream dependencies repository media records.","code":"supporting_media <- MediaRecord(   files = MediaFile(\"myfile.mp3\", media_type = \"audio/mp3\")   ) supporting_repo <- RepositoryRecord(repo_name = \"Library\") # Source record is itself linked to the Media and Repository records supporting_sour <- SourceRecord(   media_links = three_gen@records@XREFS_NEXT[\"OBJE\"],   repo_citations = three_gen@records@XREFS_NEXT[\"REPO\"] )  three_gen <- three_gen |>    push_record(supporting_media) |>    push_record(supporting_repo) |>    push_record(supporting_sour) #> New Multimedia record added with xref @M1@ #> New Repository record added with xref @R1@ #> New Source record added with xref @S1@  # Pull Main Person so we can add a link to the new source record main_person <- pull_record(three_gen, \"@I1@\") main_person@citations <- \"@S1@\" three_gen <- push_record(three_gen, main_person) get_supporting_recs(three_gen, \"@I1@\") #> [1] \"@S1@\" \"@R1@\" \"@M1@\""},{"path":"https://jl5000.github.io/gedcomS7/articles/8_finding_records.html","id":"pattern-matching","dir":"Articles","previous_headings":"","what":"Pattern matching","title":"Finding related records","text":"Finally, get_records_by_pattern() function retrieves records value matches given regular expression (case insensitive). default, returns xrefs . want see records matched, set return_context = TRUE return lines match occurred: can refine pattern include word boundaries etc.","code":"get_records_by_pattern(three_gen, \"library\") #> [1] \"@R1@\" get_records_by_pattern(three_gen, \"son\") #> [1] \"@I1@\" \"@I6@\" \"@I7@\" get_records_by_pattern(three_gen, \"son\", return_context = TRUE) #> $`@I1@` #> [1] \"1 NAME Main Person\" #>  #> $`@I6@` #> [1] \"1 NAME Son 1\" #>  #> $`@I7@` #> [1] \"1 NAME Son 2\" get_records_by_pattern(three_gen, \"\\\\bson\\\\b\", return_context = TRUE) #> $`@I6@` #> [1] \"1 NAME Son 1\" #>  #> $`@I7@` #> [1] \"1 NAME Son 2\""},{"path":"https://jl5000.github.io/gedcomS7/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jamie Lendrum. Author, maintainer.","code":""},{"path":"https://jl5000.github.io/gedcomS7/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lendrum J (2025). gedcomS7: Create Family Tree GEDCOM Files S7 Objects. R package version 0.0.0.9000, https://jl5000.github.io/gedcomS7/.","code":"@Manual{,   title = {gedcomS7: Create Family Tree GEDCOM Files with S7 Objects},   author = {Jamie Lendrum},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://jl5000.github.io/gedcomS7/}, }"},{"path":"https://jl5000.github.io/gedcomS7/index.html","id":"gedcoms7","dir":"","previous_headings":"","what":"Create Family Tree GEDCOM Files with S7 Objects","title":"Create Family Tree GEDCOM Files with S7 Objects","text":"goal gedcomS7 handle genealogical data GEDCOM files. package succeeds tidyged package many packages gedcompendium. key changes : package designed work GEDCOM 7.0, rather 5.5.5. package minimal dependencies; currently one: S7. GEDCOM files stored S7 objects rather dataframes. package contains functionality create, edit, interrogate GEDCOM files.","code":""},{"path":"https://jl5000.github.io/gedcomS7/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Family Tree GEDCOM Files with S7 Objects","text":"can install development version gedcomS7 GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"jl5000/gedcomS7\")"},{"path":"https://jl5000.github.io/gedcomS7/index.html","id":"key-limitations","dir":"","previous_headings":"","what":"Key limitations","title":"Create Family Tree GEDCOM Files with S7 Objects","text":"importing existing GEDCOM files, ensure error free. package assumes imported GEDCOM files valid validation checks carried . Several GEDCOM validators available, including online validator https://ged-inline.org/. package currently support extension tags. import file features, package may behave unpredictably. can quite cumbersome manipulating GEDCOM files using package command line. Ideally, package shiny app interface, longer term aspiration.","code":""},{"path":"https://jl5000.github.io/gedcomS7/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Create Family Tree GEDCOM Files with S7 Objects","text":"GEDCOM files can imported (read_gedcom()) created scratch, creating S7 object representation: metadata gedcom object (ged@…) can modified. New records can created ‘pushed’ GEDCOM object: Existing records, must ‘pulled’ object, edited, ‘pushed’ back. entire GEDCOM representation can seen @GEDCOM property: object can exported GEDCOM file:","code":"library(gedcomS7)  ged <- new_gedcom() ged #> GEDCOM file summary: #>   #> GEDCOM version:         7.0 #> Creation Date:          7 JAN 2025 #> Default Language:       en #>  #> Copyright:              <Undefined> #>  #> Source system:          gedcomS7 #> Product name:           The 'gedcomS7' package for the R language #> Source system version:  <Undefined> #>  #> Submitters:             0 #> Individuals:            0 #> Families:               0 #> Sources:                0 #> Repositories:           0 #> Multimedia:             0 #> Notes:                  0 ged@header@notes <- \"This file contains my family tree\" ged@header@gedcom_copyright <- \"Copyright Jamie Lendrum 2023\" ged #> GEDCOM file summary: #>   #> GEDCOM version:         7.0 #> Creation Date:          7 JAN 2025 #> Default Language:       en #>  #> Copyright:              Copyright Jamie Lendrum 2023 #>  #> Source system:          gedcomS7 #> Product name:           The 'gedcomS7' package for the R language #> Source system version:  <Undefined> #>  #> Submitters:             0 #> Individuals:            0 #> Families:               0 #> Sources:                0 #> Repositories:           0 #> Multimedia:             0 #> Notes:                  0 subm_record <- SubmitterRecord(subm_name = \"Jamie Lendrum\") indi_record <- IndividualRecord(sex = \"M\",                                 pers_names = PersonalName(\"Joe /Bloggs/\")) sour_record <- SourceRecord(full_title = \"Census of England and Wales, 1921\")  ged <- ged |>    push_record(subm_record) |>    push_record(indi_record) |>    push_record(sour_record) #> New Submitter record added with xref @U1@ #> New Individual record added with xref @I1@ #> New Source record added with xref @S1@  ged@records #> Submitters:             1 #> Individuals:            1 #> Families:               0 #> Sources:                1 #> Repositories:           0 #> Multimedia:             0 #> Notes:                  0 joe_bloggs <- pull_record(ged, \"@I1@\") joe_bloggs@notes <- \"He had a dog called Rover\" ged <- push_record(ged, joe_bloggs) ged@GEDCOM #>  [1] \"0 HEAD\"                                           #>  [2] \"1 GEDC\"                                           #>  [3] \"2 VERS 7.0\"                                       #>  [4] \"1 SOUR gedcomS7\"                                  #>  [5] \"2 NAME The 'gedcomS7' package for the R language\" #>  [6] \"2 CORP Jamie Lendrum\"                             #>  [7] \"3 EMAIL jalendrum@gmail.com\"                      #>  [8] \"1 DATE 7 JAN 2025\"                                #>  [9] \"1 COPR Copyright Jamie Lendrum 2023\"              #> [10] \"1 LANG en\"                                        #> [11] \"1 NOTE This file contains my family tree\"         #> [12] \"0 @U1@ SUBM\"                                      #> [13] \"1 NAME Jamie Lendrum\"                             #> [14] \"0 @I1@ INDI\"                                      #> [15] \"1 NAME Joe /Bloggs/\"                              #> [16] \"1 SEX M\"                                          #> [17] \"1 NOTE He had a dog called Rover\"                 #> [18] \"0 @S1@ SOUR\"                                      #> [19] \"1 TITL Census of England and Wales, 1921\"         #> [20] \"0 TRLR\" write_gedcom(ged, \"my_gedcom.ged\")"},{"path":"https://jl5000.github.io/gedcomS7/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Create Family Tree GEDCOM Files with S7 Objects","text":"FamilySearch GEDCOM Specification, Prepared Family History Department, Church Jesus Christ Latter-day Saints. https://gedcom.io/specifications/FamilySearchGEDCOMv7.html","code":""},{"path":"https://jl5000.github.io/gedcomS7/index.html","id":"notice","dir":"","previous_headings":"","what":"Notice","title":"Create Family Tree GEDCOM Files with S7 Objects","text":"work comprises, based , derived FAMILYSEARCH GEDCOM™ Specification, © 1984-2023 Intellectual Reserve, Inc. rights reserved. “FAMILYSEARCH GEDCOM™” “FAMILYSEARCH®” trademarks Intellectual Reserve, Inc. may used except allowed Apache 2.0 license governs work expressly authorized writing advance Intellectual Reserve, Inc.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Address.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an address object — Address","title":"Create an address object — Address","text":"Create address object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an address object — Address","text":"","code":"Address(   full = character(0),   city = character(0),   state = character(0),   postal_code = character(0),   country = character(0),   adr1 = character(0),   adr2 = character(0),   adr3 = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/Address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an address object — Address","text":"full full address appear mailing label, lines separated semi-colon space. example: \"White House; 1600 Pennsylvania Avenue N.W.; Washington, DC 20500; United States America\" city city component address. state state component address. postal_code postal code component address. country country component address. adr1 Deprecated. adr2 Deprecated. adr3 Deprecated.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an address object — Address","text":"S7 object representing GEDCOM ADDRESS_STRUCTURE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Association.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an association object — Association","title":"Create an association object — Association","text":"Create association object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Association.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an association object — Association","text":"","code":"Association(   indi_xref = \"@VOID@\",   indi_phrase = character(0),   relation_is = character(0),   relation_phrase = character(0),   note_xrefs = character(0),   notes = list(),   citations = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/Association.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an association object — Association","text":"indi_xref cross-reference identifier individual record. individual record, can left blank value \"@VOID@\" used. However, define @indi_phrase. indi_phrase Textual information expressed @indi_xref. relation_is nature association. must value val_roles(). value \"\" used, @relation_phrase must given. relation_phrase Textual information expressed relation. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Association.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an association object — Association","text":"S7 object representing GEDCOM ASSOCIATION_STRUCTURE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/ChangeDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a change date object — ChangeDate","title":"Create a change date object — ChangeDate","text":"Create change date object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/ChangeDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a change date object — ChangeDate","text":"","code":"ChangeDate(   date_exact = character(0),   time = character(0),   note_xrefs = character(0),   notes = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/ChangeDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a change date object — ChangeDate","text":"date_exact exact date given either formatted GEDCOM string, DateExact() object. given, default today's date. time time given either formatted GEDCOM string, Time() object. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/ChangeDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a change date object — ChangeDate","text":"S7 object representing GEDCOM CHANGE_DATE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/CreationDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a creation date object — CreationDate","title":"Create a creation date object — CreationDate","text":"Create creation date object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/CreationDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a creation date object — CreationDate","text":"","code":"CreationDate(date_exact = character(0), time = character(0))"},{"path":"https://jl5000.github.io/gedcomS7/reference/CreationDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a creation date object — CreationDate","text":"date_exact exact date given either formatted GEDCOM string, DateExact() object. given, default today's date. time time given either formatted GEDCOM string, Time() object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/CreationDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a creation date object — CreationDate","text":"S7 object representing GEDCOM CREATION_DATE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateApprox.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM Approximate Date object — DateApprox","title":"Create a GEDCOM Approximate Date object — DateApprox","text":"Create GEDCOM Approximate Date object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateApprox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM Approximate Date object — DateApprox","text":"","code":"DateApprox(date_greg = character(0), about = TRUE, calc = FALSE, est = FALSE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/DateApprox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GEDCOM Approximate Date object — DateApprox","text":"date_greg Gregorian date given either formatted GEDCOM string, DateGregorian object. Whether date near date given. calc Whether date calculated values. est Whether date near date given, calculated values.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateApprox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM Approximate Date object — DateApprox","text":"S7 object representing GEDCOM Approximate Date.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateExact.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM Exact Date object — DateExact","title":"Create a GEDCOM Exact Date object — DateExact","text":"Create GEDCOM Exact Date object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateExact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM Exact Date object — DateExact","text":"","code":"DateExact(year = integer(0), month = integer(0), day = integer(0))"},{"path":"https://jl5000.github.io/gedcomS7/reference/DateExact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GEDCOM Exact Date object — DateExact","text":"year year given integer (greater 0). month month year given integer 1 12. day day month given integer 1 31.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateExact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM Exact Date object — DateExact","text":"S7 object representing GEDCOM Exact Date.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateGregorian.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM Gregorian Date object — DateGregorian","title":"Create a GEDCOM Gregorian Date object — DateGregorian","text":"Create GEDCOM Gregorian Date object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateGregorian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM Gregorian Date object — DateGregorian","text":"","code":"DateGregorian(   year = integer(0),   month = integer(0),   day = integer(0),   bce = FALSE )"},{"path":"https://jl5000.github.io/gedcomS7/reference/DateGregorian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GEDCOM Gregorian Date object — DateGregorian","text":"year year given integer (greater 0). month month year given integer 1 12. day day month given integer 1 31. bce Whether date Common Era. FALSE default, TRUE, year given.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateGregorian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM Gregorian Date object — DateGregorian","text":"S7 object representing GEDCOM Gregorian Date.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DatePeriod.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM Date Period object — DatePeriod","title":"Create a GEDCOM Date Period object — DatePeriod","text":"Create GEDCOM Date Period object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DatePeriod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM Date Period object — DatePeriod","text":"","code":"DatePeriod(start_date = character(0), end_date = character(0))"},{"path":"https://jl5000.github.io/gedcomS7/reference/DatePeriod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GEDCOM Date Period object — DatePeriod","text":"start_date start period/range given either formatted GEDCOM string, DateGregorian() object. end_date end period/range given either formatted GEDCOM string, DateGregorian() object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DatePeriod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM Date Period object — DatePeriod","text":"S7 object representing GEDCOM Date Period.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateRange.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM Date Range object — DateRange","title":"Create a GEDCOM Date Range object — DateRange","text":"Create GEDCOM Date Range object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM Date Range object — DateRange","text":"","code":"DateRange(start_date = character(0), end_date = character(0))"},{"path":"https://jl5000.github.io/gedcomS7/reference/DateRange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GEDCOM Date Range object — DateRange","text":"start_date start period/range given either formatted GEDCOM string, DateGregorian() object. end_date end period/range given either formatted GEDCOM string, DateGregorian() object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateRange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM Date Range object — DateRange","text":"S7 object representing GEDCOM Date Range.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateSorting.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM Sorting Date object — DateSorting","title":"Create a GEDCOM Sorting Date object — DateSorting","text":"Create GEDCOM Sorting Date object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateSorting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM Sorting Date object — DateSorting","text":"","code":"DateSorting(   date = character(0),   date_phrase = character(0),   time = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/DateSorting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GEDCOM Sorting Date object — DateSorting","text":"date date given either formatted GEDCOM string, DateGregorian object. date_phrase Textual information expressed date. time time given either formatted GEDCOM string, Time() object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateSorting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM Sorting Date object — DateSorting","text":"S7 object representing GEDCOM Sorting Date.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM Date Value object — DateValue","title":"Create a GEDCOM Date Value object — DateValue","text":"Create GEDCOM Date Value object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM Date Value object — DateValue","text":"","code":"DateValue(date = character(0), date_phrase = character(0), time = character(0))"},{"path":"https://jl5000.github.io/gedcomS7/reference/DateValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GEDCOM Date Value object — DateValue","text":"date date given either formatted GEDCOM string, DateValue() object. date_phrase Textual information expressed date. time time given either formatted GEDCOM string, Time() object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/DateValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM Date Value object — DateValue","text":"S7 object representing GEDCOM Date Value.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FactsRecorded.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an object recording facts covered in a source record — FactsRecorded","title":"Create an object recording facts covered in a source record — FactsRecorded","text":"Create object recording facts covered source record","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FactsRecorded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an object recording facts covered in a source record — FactsRecorded","text":"","code":"FactsRecorded(   fact_types = character(0),   date_period = character(0),   date_phrase = character(0),   territory = NULL )"},{"path":"https://jl5000.github.io/gedcomS7/reference/FactsRecorded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an object recording facts covered in a source record — FactsRecorded","text":"fact_types character string indicating types events recorded particular source. event type separated comma space. example, parish register births, deaths, marriages BIRT, DEAT, MARR. date_period date period given either formatted GEDCOM string, DatePeriod() object. date_phrase Textual information expressed date. territory territory associated events covered. can either Place() object character string (comma-separated string region names, ordered smallest largest).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FactsRecorded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an object recording facts covered in a source record — FactsRecorded","text":"S7 object representing GEDCOM SOUR.EVEN structure.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyAttribute.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a family attribute object — FamilyAttribute","title":"Create a family attribute object — FamilyAttribute","text":"Create family attribute object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyAttribute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a family attribute object — FamilyAttribute","text":"","code":"FamilyAttribute(   fact_type = character(0),   fact_val = character(0),   fact_desc = character(0),   date = character(0),   place = NULL,   address = NULL,   phone_numbers = character(0),   emails = character(0),   faxes = character(0),   web_pages = character(0),   agency = character(0),   relig_affil = character(0),   cause = character(0),   confidential = FALSE,   locked = FALSE,   private = FALSE,   date_sort = character(0),   associations = list(),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   unique_ids = character(0),   husb_age = character(0),   husb_age_phrase = character(0),   wife_age = character(0),   wife_age_phrase = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyAttribute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a family attribute object — FamilyAttribute","text":"fact_type code indicating type fact. must taken one val_individual_event_types(), val_individual_attribute_types(), val_family_event_types(), val_family_attribute_types(). generic event (\"EVEN\") attribute (\"FACT\") can also defined bespoke facts. See fact_rules_df() set rules surrounding codes allowed. fact_val value associated fact. example \"NCHI\" number children. See fact_rules_df() set rules surrounding need values values allowed. fact_desc classification fact. required generic events attributes. See fact_rules_df() set rules surrounding need . date date given either formatted GEDCOM string, DateValue() object. place associated place. can either Place() object character string (comma-separated string region names, ordered smallest largest). address address given either Address() object character string. written mailing label new lines separated \\n. phone_numbers character vector phone numbers. emails character vector email addresses. faxes character vector fax numbers. web_pages character vector web page URLs. agency organization, institution, corporation, person, entity responsibility associated fact. Examples employer person associated occupation, educational establishment awarded scholastic award. relig_affil religious denomination associated fact. cause Used special cases record reasons precipitated fact (e.g. cause death). confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. date_sort date given either formatted GEDCOM string, DateSorting() object. associations Associated individuals. can either Association() object list . note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records. media_links Associated multimedia. can either MediaLink() object, list , character vector XREFs multimedia records. unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). husb_age character string indicates age years, months, weeks /days husband time fact. combination permitted. labels must come corresponding number, example; \"4y 8m 1w 3d\". Age bounds can also included, example; \"< 40y\". age fit format describe age corresponding phrase parameter. husb_age_phrase Free text information expressed husband's age. wife_age character string indicates age years, months, weeks /days wife time fact. combination permitted. labels must come corresponding number, example; \"4y 8m 1w 3d\". Age bounds can also included, example; \"< 40y\". age fit format describe age corresponding phrase parameter. wife_age_phrase Free text information expressed wife's age.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyAttribute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a family attribute object — FamilyAttribute","text":"S7 object representing GEDCOM FAMILY_ATTRIBUTE_STRUCTURE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a family event object — FamilyEvent","title":"Create a family event object — FamilyEvent","text":"Create family event object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a family event object — FamilyEvent","text":"","code":"FamilyEvent(   fact_type = character(0),   fact_val = character(0),   fact_desc = character(0),   date = character(0),   place = NULL,   address = NULL,   phone_numbers = character(0),   emails = character(0),   faxes = character(0),   web_pages = character(0),   agency = character(0),   relig_affil = character(0),   cause = character(0),   confidential = FALSE,   locked = FALSE,   private = FALSE,   date_sort = character(0),   associations = list(),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   unique_ids = character(0),   husb_age = character(0),   husb_age_phrase = character(0),   wife_age = character(0),   wife_age_phrase = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a family event object — FamilyEvent","text":"fact_type code indicating type fact. must taken one val_individual_event_types(), val_individual_attribute_types(), val_family_event_types(), val_family_attribute_types(). generic event (\"EVEN\") attribute (\"FACT\") can also defined bespoke facts. See fact_rules_df() set rules surrounding codes allowed. fact_val value associated fact. example \"NCHI\" number children. See fact_rules_df() set rules surrounding need values values allowed. fact_desc classification fact. required generic events attributes. See fact_rules_df() set rules surrounding need . date date given either formatted GEDCOM string, DateValue() object. place associated place. can either Place() object character string (comma-separated string region names, ordered smallest largest). address address given either Address() object character string. written mailing label new lines separated \\n. phone_numbers character vector phone numbers. emails character vector email addresses. faxes character vector fax numbers. web_pages character vector web page URLs. agency organization, institution, corporation, person, entity responsibility associated fact. Examples employer person associated occupation, educational establishment awarded scholastic award. relig_affil religious denomination associated fact. cause Used special cases record reasons precipitated fact (e.g. cause death). confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. date_sort date given either formatted GEDCOM string, DateSorting() object. associations Associated individuals. can either Association() object list . note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records. media_links Associated multimedia. can either MediaLink() object, list , character vector XREFs multimedia records. unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). husb_age character string indicates age years, months, weeks /days husband time fact. combination permitted. labels must come corresponding number, example; \"4y 8m 1w 3d\". Age bounds can also included, example; \"< 40y\". age fit format describe age corresponding phrase parameter. husb_age_phrase Free text information expressed husband's age. wife_age character string indicates age years, months, weeks /days wife time fact. combination permitted. labels must come corresponding number, example; \"4y 8m 1w 3d\". Age bounds can also included, example; \"< 40y\". age fit format describe age corresponding phrase parameter. wife_age_phrase Free text information expressed wife's age.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyEvent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a family event object — FamilyEvent","text":"S7 object representing GEDCOM FAMILY_EVENT_STRUCTURE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyLinkChild.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a family link (as child) object — FamilyLinkChild","title":"Create a family link (as child) object — FamilyLinkChild","text":"Create family link (child) object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyLinkChild.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a family link (as child) object — FamilyLinkChild","text":"","code":"FamilyLinkChild(   fam_xref = character(0),   note_xrefs = character(0),   notes = list(),   pedigree = character(0),   pedigree_phrase = character(0),   confidence = character(0),   confidence_phrase = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyLinkChild.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a family link (as child) object — FamilyLinkChild","text":"fam_xref cross-reference identifier family record. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. pedigree optional value val_pedigree_types() indicating nature link. pedigree_phrase optional free-text phrase describing nature link. required @pedigree \"\". confidence optional value val_confidence_types() indicating confidence link. confidence_phrase optional free-text phrase expanding confidence link.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyLinkChild.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a family link (as child) object — FamilyLinkChild","text":"S7 object representing GEDCOM family link child.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyLinkSpouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a family link (as spouse) object — FamilyLinkSpouse","title":"Create a family link (as spouse) object — FamilyLinkSpouse","text":"Create family link (spouse) object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyLinkSpouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a family link (as spouse) object — FamilyLinkSpouse","text":"","code":"FamilyLinkSpouse(   fam_xref = character(0),   note_xrefs = character(0),   notes = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyLinkSpouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a family link (as spouse) object — FamilyLinkSpouse","text":"fam_xref cross-reference identifier family record. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyLinkSpouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a family link (as spouse) object — FamilyLinkSpouse","text":"S7 object representing GEDCOM family link spouse.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a family record object — FamilyRecord","title":"Create a family record object — FamilyRecord","text":"Create family record object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a family record object — FamilyRecord","text":"","code":"FamilyRecord(   XREF = \"@GEDCOMS7_ORPHAN@\",   confidential = FALSE,   locked = FALSE,   private = FALSE,   user_ids = character(0),   unique_ids = character(0),   ext_ids = character(0),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   created = NULL,   updated = NULL,   facts = list(),   non_events = list(),   husb_xref = character(0),   wife_xref = character(0),   chil_xrefs = character(0),   associations = list(),   subm_xrefs = character(0),   spouse_sealings = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a family record object — FamilyRecord","text":"XREF cross-reference identifier record. edit maintenance done automatically. confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. user_ids character vector user-generated identifiers. type identifiers can given vector names, e.g. c(\"Driving license number\" = \"ABC123\") unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). ext_ids named character vector identifiers maintained external authority. names must given URI. See GEDCOM specification information. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records. media_links Associated multimedia. can either MediaLink() object, list , character vector XREFs multimedia records. created CreationDate() object containing date record created. Creating object parameters sets date today. updated ChangeDate() object containing date record updated. Creating object parameters sets date today. facts Events /attributes family. FamilyEvent()/FamilyAttribute() object, list . non_events Events family experience. NonEvent() object, list . husb_xref, wife_xref, chil_xrefs cross-reference identifier(s) member's individual records. individual record, value \"@VOID@\" can used. However, need describe individual using named vector (description can used either case), e.g. c(\"Joe Bloggs\" = \"@VOID@\") c(\"Joe Bloggs\" = \"@I1@\"). associations Associated individuals. can either Association() object list . subm_xrefs character vector relevant submitter record cross-reference identifiers. spouse_sealings SpouseSealing() object list detailing sealing husband wife temple ceremony Church Jesus Christ Latter-day Saints.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/FamilyRecord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a family record object — FamilyRecord","text":"S7 object representing GEDCOM FAMILY_RECORD.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM header object — GedcomHeader","title":"Create a GEDCOM header object — GedcomHeader","text":"Create GEDCOM header object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM header object — GedcomHeader","text":"","code":"GedcomHeader(   gedcom_version = character(0),   ext_tags = character(0),   source = NULL,   destination = character(0),   creation_date = character(0),   creation_time = character(0),   subm_xref = character(0),   gedcom_copyright = character(0),   default_language = character(0),   default_place_form = character(0),   notes = list(),   note_xrefs = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GEDCOM header object — GedcomHeader","text":"gedcom_version version number official specification GEDCOM conforms . must include major minor version (example, “7.0”); may include patch well (example, “7.0.1”), required. ext_tags supported. source GedcomSource() object describing software generated GEDCOM.` destination identifier system expected receive GEDCOM. creation_date creation date file given either formatted GEDCOM string, DateExact() object. creation_time creation time file given either formatted GEDCOM string, Time() object. subm_xref cross-reference identifier primary submitter. gedcom_copyright copyright statement, appropriate copyright laws applicable data. default_language default language entire GEDCOM object. default_place_form default form place names GEDCOM object. comma-separated string jurisdictional titles. example \"City, County, State, Country\". notes Associated notes. can either Note() object, list , character vector notes. note_xrefs character vector relevant note record cross-reference identifiers.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM header object — GedcomHeader","text":"S7 object representing GEDCOM header.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomS7.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM object — GedcomS7","title":"Create a GEDCOM object — GedcomS7","text":"need use directly create new GEDCOM objects. Instead, use new_gedcom() populates relevant defaults.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomS7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM object — GedcomS7","text":"","code":"GedcomS7(   header = GedcomHeader(),   records = GedcomRecords(),   update_change_dates = FALSE,   add_creation_dates = FALSE )"},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomS7.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GEDCOM object — GedcomS7","text":"header S7 object whose properties contain information GEDCOM object whole. records S7 object whose properties contain information records. edit properties capitals directly. See Details information. update_change_dates Whether automatically update change dates updating records. happens record pushed gedcom object. add_creation_dates Whether automatically add creation dates creating records. happens record pushed gedcom object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomS7.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM object — GedcomS7","text":"S7 object representing GEDCOM file.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomS7.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a GEDCOM object — GedcomS7","text":"information records contained @records property. @prefixes property named vector containing alphanumeric string (6 characters long) precede number given identify new records, currently 7 types: Individual (INDI) Family (FAM) Source (SOUR) Repository (REPO) Multimedia (OBJE) Note (SNOTE) Submitter (SUBM) vector must particular length specific names. example: c(SUBM = \"U\", INDI = \"\", FAM = \"F\", SOUR = \"S\", REPO = \"R\", OBJE = \"M\", SNOTE = \"N\"). order records appear vector also dictate order records appear exported file.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM source object — GedcomSource","title":"Create a GEDCOM source object — GedcomSource","text":"Create GEDCOM source object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM source object — GedcomSource","text":"","code":"GedcomSource(   product_id = character(0),   product_name = character(0),   product_version = character(0),   business_name = character(0),   business_address = NULL,   phone_numbers = character(0),   emails = character(0),   faxes = character(0),   web_pages = character(0),   data_name = character(0),   data_pubdate = character(0),   data_pubtime = character(0),   data_copyright = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GEDCOM source object — GedcomSource","text":"product_id identifier product producing dataset. product_name name product producing dataset. product_version version product producing dataset. business_name name business, corporation, person produced commissioned product. business_address address business, corporation, person produced commissioned product. address given either Address() object character string. written mailing label new lines separated \\n. phone_numbers character vector phone numbers. emails character vector email addresses. faxes character vector fax numbers. web_pages character vector web page URLs. data_name Deprecated. data_pubdate Deprecated. data_pubtime Deprecated. data_copyright Deprecated.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/GedcomSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM source object — GedcomSource","text":"S7 object representing GEDCOM HEAD.SOUR.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualAttribute.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an individual attribute object — IndividualAttribute","title":"Create an individual attribute object — IndividualAttribute","text":"Create individual attribute object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualAttribute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an individual attribute object — IndividualAttribute","text":"","code":"IndividualAttribute(   fact_type = character(0),   fact_val = character(0),   fact_desc = character(0),   date = character(0),   place = NULL,   address = NULL,   phone_numbers = character(0),   emails = character(0),   faxes = character(0),   web_pages = character(0),   agency = character(0),   relig_affil = character(0),   cause = character(0),   confidential = FALSE,   locked = FALSE,   private = FALSE,   date_sort = character(0),   associations = list(),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   unique_ids = character(0),   age = character(0),   age_phrase = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualAttribute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an individual attribute object — IndividualAttribute","text":"fact_type code indicating type fact. must taken one val_individual_event_types(), val_individual_attribute_types(), val_family_event_types(), val_family_attribute_types(). generic event (\"EVEN\") attribute (\"FACT\") can also defined bespoke facts. See fact_rules_df() set rules surrounding codes allowed. fact_val value associated fact. example \"NCHI\" number children. See fact_rules_df() set rules surrounding need values values allowed. fact_desc classification fact. required generic events attributes. See fact_rules_df() set rules surrounding need . date date given either formatted GEDCOM string, DateValue() object. place associated place. can either Place() object character string (comma-separated string region names, ordered smallest largest). address address given either Address() object character string. written mailing label new lines separated \\n. phone_numbers character vector phone numbers. emails character vector email addresses. faxes character vector fax numbers. web_pages character vector web page URLs. agency organization, institution, corporation, person, entity responsibility associated fact. Examples employer person associated occupation, educational establishment awarded scholastic award. relig_affil religious denomination associated fact. cause Used special cases record reasons precipitated fact (e.g. cause death). confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. date_sort date given either formatted GEDCOM string, DateSorting() object. associations Associated individuals. can either Association() object list . note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records. media_links Associated multimedia. can either MediaLink() object, list , character vector XREFs multimedia records. unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). age character string indicates age years, months, weeks /days individual time fact. combination permitted. labels must come corresponding number, example; \"4y 8m 1w 3d\". Age bounds can also included, example; \"< 40y\". age fit format describe age corresponding phrase parameter. age_phrase Free text information expressed individual's age.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualAttribute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an individual attribute object — IndividualAttribute","text":"S7 object representing GEDCOM INDIVIDUAL_ATTRIBUTE_STRUCTURE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an individual event object — IndividualEvent","title":"Create an individual event object — IndividualEvent","text":"Create individual event object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an individual event object — IndividualEvent","text":"","code":"IndividualEvent(   fact_type = character(0),   fact_val = character(0),   fact_desc = character(0),   date = character(0),   place = NULL,   address = NULL,   phone_numbers = character(0),   emails = character(0),   faxes = character(0),   web_pages = character(0),   agency = character(0),   relig_affil = character(0),   cause = character(0),   confidential = FALSE,   locked = FALSE,   private = FALSE,   date_sort = character(0),   associations = list(),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   unique_ids = character(0),   age = character(0),   age_phrase = character(0),   fam_xref = character(0),   adop_parent = character(0),   adop_parent_phrase = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an individual event object — IndividualEvent","text":"fact_type code indicating type fact. must taken one val_individual_event_types(), val_individual_attribute_types(), val_family_event_types(), val_family_attribute_types(). generic event (\"EVEN\") attribute (\"FACT\") can also defined bespoke facts. See fact_rules_df() set rules surrounding codes allowed. fact_val value associated fact. example \"NCHI\" number children. See fact_rules_df() set rules surrounding need values values allowed. fact_desc classification fact. required generic events attributes. See fact_rules_df() set rules surrounding need . date date given either formatted GEDCOM string, DateValue() object. place associated place. can either Place() object character string (comma-separated string region names, ordered smallest largest). address address given either Address() object character string. written mailing label new lines separated \\n. phone_numbers character vector phone numbers. emails character vector email addresses. faxes character vector fax numbers. web_pages character vector web page URLs. agency organization, institution, corporation, person, entity responsibility associated fact. Examples employer person associated occupation, educational establishment awarded scholastic award. relig_affil religious denomination associated fact. cause Used special cases record reasons precipitated fact (e.g. cause death). confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. date_sort date given either formatted GEDCOM string, DateSorting() object. associations Associated individuals. can either Association() object list . note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records. media_links Associated multimedia. can either MediaLink() object, list , character vector XREFs multimedia records. unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). age character string indicates age years, months, weeks /days individual time fact. combination permitted. labels must come corresponding number, example; \"4y 8m 1w 3d\". Age bounds can also included, example; \"< 40y\". age fit format describe age corresponding phrase parameter. age_phrase Free text information expressed individual's age. fam_xref cross-reference identifier family record. adop_parent adopting parent. Must value val_adoptive_parents(). adoption events . adop_parent_phrase free text description adoptive parent (value insufficient).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualEvent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an individual event object — IndividualEvent","text":"S7 object representing GEDCOM INDIVIDUAL_EVENT_STRUCTURE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an individual record object — IndividualRecord","title":"Create an individual record object — IndividualRecord","text":"Create individual record object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an individual record object — IndividualRecord","text":"","code":"IndividualRecord(   XREF = \"@GEDCOMS7_ORPHAN@\",   confidential = FALSE,   locked = FALSE,   private = FALSE,   user_ids = character(0),   unique_ids = character(0),   ext_ids = character(0),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   created = NULL,   updated = NULL,   pers_names = list(),   sex = \"U\",   facts = list(),   non_events = list(),   ordinances = list(),   fam_links_chil = list(),   fam_links_spou = list(),   subm_xrefs = character(0),   associations = list(),   alia_xrefs = character(0),   anci_xrefs = character(0),   desi_xrefs = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an individual record object — IndividualRecord","text":"XREF cross-reference identifier record. edit maintenance done automatically. confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. user_ids character vector user-generated identifiers. type identifiers can given vector names, e.g. c(\"Driving license number\" = \"ABC123\") unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). ext_ids named character vector identifiers maintained external authority. names must given URI. See GEDCOM specification information. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records. media_links Associated multimedia. can either MediaLink() object, list , character vector XREFs multimedia records. created CreationDate() object containing date record created. Creating object parameters sets date today. updated ChangeDate() object containing date record updated. Creating object parameters sets date today. pers_names PersonalName() object list , giving names individual. simple character vector names can provided instead, recommended. sex sex individual. Either \"M\" (male), \"F\" (female), \"X\" (), \"U\" (undetermined, default). facts Events /attributes individual. IndividualEvent()/IndividualAttribute() object, list . non_events Events individual experience. NonEvent() object, list . ordinances Ordinance() object, list . fam_links_chil FamilyLinkChild() object list , giving Family records individual member child. character vector Family record xrefs can also provided. automatically updated individual's membership Family record changes. fam_links_spou FamilyLinkSpouse() object list , giving Family records individual member spouse. character vector Family record xrefs can also provided. automatically updated individual's membership Family record changes. subm_xrefs character vector relevant submitter record cross-reference identifiers. associations Associated individuals. can either Association() object list . alia_xrefs named character vector relevant individual record cross-reference identifiers whose records also represent individual. vector names may provide description records. anci_xrefs character vector relevant submitter record cross-reference identifiers interested ancestors individual. desi_xrefs character vector relevant submitter record cross-reference identifiers interested descendants individual.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/IndividualRecord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an individual record object — IndividualRecord","text":"S7 object representing GEDCOM INDIVIDUAL_RECORD.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a media file object — MediaFile","title":"Create a media file object — MediaFile","text":"Create media file object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a media file object — MediaFile","text":"","code":"MediaFile(   location = character(0),   title = character(0),   media_type = character(0),   medium = character(0),   medium_phrase = character(0),   media_alt = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a media file object — MediaFile","text":"location absolute relative URL file. title title multimedia record. media_type media type defined RFC 2045. medium value val_medium_types(). \"\" selected @medium_phrase must given. describe original medium derived. digital image scanned physical photograph, \"PHOTO\" instead \"ELECTRONIC\". medium_phrase free text description medium. mandatory @medium \"\". media_alt named vector media alternative media forms, c(form = location)","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a media file object — MediaFile","text":"S7 object representing GEDCOM multimedia file substructure.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaLink.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimedia link object — MediaLink","title":"Create a multimedia link object — MediaLink","text":"Create multimedia link object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaLink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimedia link object — MediaLink","text":"","code":"MediaLink(   media_xref = \"@VOID@\",   title = character(0),   top = integer(0),   left = integer(0),   height = integer(0),   width = integer(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaLink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimedia link object — MediaLink","text":"media_xref cross-reference identifier multimedia record. title title multimedia record. top number pixels omit top side image. left number pixels omit left side image. height height pixels cropped region. width width pixels cropped region.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaLink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multimedia link object — MediaLink","text":"S7 object representing GEDCOM MULTIMEDIA_LINK.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaLink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a multimedia link object — MediaLink","text":"properties @left @top indicate top left corner region display. properties @width @height indicate dimensions region display. multimedia record contains multiple files, crop parameters applies first file.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a multimedia record object — MediaRecord","title":"Create a multimedia record object — MediaRecord","text":"Create multimedia record object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a multimedia record object — MediaRecord","text":"","code":"MediaRecord(   XREF = \"@GEDCOMS7_ORPHAN@\",   confidential = FALSE,   locked = FALSE,   private = FALSE,   user_ids = character(0),   unique_ids = character(0),   ext_ids = character(0),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   created = NULL,   updated = NULL,   files = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a multimedia record object — MediaRecord","text":"XREF cross-reference identifier record. edit maintenance done automatically. confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. user_ids character vector user-generated identifiers. type identifiers can given vector names, e.g. c(\"Driving license number\" = \"ABC123\") unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). ext_ids named character vector identifiers maintained external authority. names must given URI. See GEDCOM specification information. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records. media_links used. created CreationDate() object containing date record created. Creating object parameters sets date today. updated ChangeDate() object containing date record updated. Creating object parameters sets date today. files MediaFile object list . refers 1 external digital files. Grouped files pertain context.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/MediaRecord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a multimedia record object — MediaRecord","text":"S7 object representing GEDCOM MULTIMEDIA_RECORD.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/NonEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a non-event object — NonEvent","title":"Create a non-event object — NonEvent","text":"Create non-event object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/NonEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a non-event object — NonEvent","text":"","code":"NonEvent(   event_type = character(0),   date_period = character(0),   date_phrase = character(0),   note_xrefs = character(0),   notes = list(),   citations = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/NonEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a non-event object — NonEvent","text":"event_type code indicating type event happen. must taken val_event_types(). date_period date period given either formatted GEDCOM string, DatePeriod() object. date_phrase Textual information expressed date. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/NonEvent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a non-event object — NonEvent","text":"S7 object representing GEDCOM NON_EVENT_STRUCTURE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Note.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a note structure object — Note","title":"Create a note structure object — Note","text":"Create note structure object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Note.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a note structure object — Note","text":"","code":"Note(   text = character(0),   language = character(0),   media_type = character(0),   translations = list(),   citations = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/Note.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a note structure object — Note","text":"text character string. New lines created \\n. language character string language tags defined BCP 47. media_type media type defined RFC 2045. translations TranslationText() object list . One alternate translation text. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Note.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a note structure object — Note","text":"S7 object representing GEDCOM NOTE_STRUCTURE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Note.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a note structure object — Note","text":"shared note (SNOTE) alternative structure defined separately relevant structures.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/NoteRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a shared note record object — NoteRecord","title":"Create a shared note record object — NoteRecord","text":"Create shared note record object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/NoteRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a shared note record object — NoteRecord","text":"","code":"NoteRecord(   XREF = \"@GEDCOMS7_ORPHAN@\",   confidential = FALSE,   locked = FALSE,   private = FALSE,   user_ids = character(0),   unique_ids = character(0),   ext_ids = character(0),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   created = NULL,   updated = NULL,   text = character(0),   media_type = character(0),   language = character(0),   translations = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/NoteRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a shared note record object — NoteRecord","text":"XREF cross-reference identifier record. edit maintenance done automatically. confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. user_ids character vector user-generated identifiers. type identifiers can given vector names, e.g. c(\"Driving license number\" = \"ABC123\") unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). ext_ids named character vector identifiers maintained external authority. names must given URI. See GEDCOM specification information. note_xrefs used. notes used. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records. media_links used. created CreationDate() object containing date record created. Creating object parameters sets date today. updated ChangeDate() object containing date record updated. Creating object parameters sets date today. text character string. New lines created \\n. media_type media type defined RFC 2045. language character string language tags defined BCP 47. translations TranslationText() object list . One alternate translation text.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/NoteRecord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a shared note record object — NoteRecord","text":"S7 object representing GEDCOM SHARED_NOTE_RECORD.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Ordinance.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an individual ordinance object — Ordinance","title":"Create an individual ordinance object — Ordinance","text":"Create individual ordinance object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Ordinance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an individual ordinance object — Ordinance","text":"","code":"Ordinance(   ord_type = character(0),   date = character(0),   temple_name = character(0),   place = NULL,   ord_state = character(0),   state_date = character(0),   state_time = character(0),   note_xrefs = character(0),   notes = list(),   citations = list(),   fam_xref = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/Ordinance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an individual ordinance object — Ordinance","text":"ord_type value val_individual_ordinance_types(). date date given either formatted GEDCOM string, DateValue() object. temple_name name temple Church Jesus Christ Latter-day Saints. place associated place. can either Place() object character string (comma-separated string region names, ordered smallest largest). ord_state optional value val_ordinance_states(@ord_type). state_date ordinance date given either formatted GEDCOM string, DateExact object. state_time ordinance time given either formatted GEDCOM string, Time object. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records. fam_xref cross-reference identifier family record.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Ordinance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an individual ordinance object — Ordinance","text":"S7 object representing GEDCOM LDS_INDIVIDUAL_ORDINANCE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalName.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a personal name object — PersonalName","title":"Create a personal name object — PersonalName","text":"Create personal name object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a personal name object — PersonalName","text":"","code":"PersonalName(   pers_name = character(0),   name_type = character(0),   type_phrase = character(0),   name_pieces = NULL,   name_translations = list(),   notes = list(),   note_xrefs = character(0),   citations = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a personal name object — PersonalName","text":"pers_name full name individual. Surnames enclosed forward slashes. name_type optional name type taken val_name_types(). type_phrase optional free text description name type. required name type \"\". name_pieces PersonalNamePieces() object defining pieces full name. name_translations PersonalNameTran() object list , providing different translations personal name. notes Associated notes. can either Note() object, list , character vector notes. note_xrefs character vector relevant note record cross-reference identifiers. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a personal name object — PersonalName","text":"S7 object representing GEDCOM PERSONAL_NAME_STRUCTURE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalNamePieces.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a name pieces object — PersonalNamePieces","title":"Create a name pieces object — PersonalNamePieces","text":"Create name pieces object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalNamePieces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a name pieces object — PersonalNamePieces","text":"","code":"PersonalNamePieces(   prefix = character(0),   given = character(0),   nickname = character(0),   surname_prefix = character(0),   surname = character(0),   suffix = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalNamePieces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a name pieces object — PersonalNamePieces","text":"prefix name prefix, e.g. Cmdr. given given name earned name. nickname descriptive familiar name used instead , addition , one’s proper name. surname_prefix Surname prefix article used family name. example name \"de la Cruz\", value \"de la\". surname Surname family name. suffix Name piece appears given name surname parts, e.g. Jr.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalNamePieces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a name pieces object — PersonalNamePieces","text":"S7 object representing GEDCOM PERSONAL_NAME_PIECES.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalNameTran.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a name translation object — PersonalNameTran","title":"Create a name translation object — PersonalNameTran","text":"Create name translation object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalNameTran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a name translation object — PersonalNameTran","text":"","code":"PersonalNameTran(   pers_name = character(0),   language = character(0),   name_pieces = NULL )"},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalNameTran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a name translation object — PersonalNameTran","text":"pers_name full name individual. Surnames enclosed forward slashes. language character string language tags defined BCP 47. name_pieces PersonalNamePieces() object defining pieces full name.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/PersonalNameTran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a name translation object — PersonalNameTran","text":"S7 object representing GEDCOM personal name translation substructure.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Place.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a place structure object — Place","title":"Create a place structure object — Place","text":"Create place structure object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Place.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a place structure object — Place","text":"","code":"Place(   place_name = character(0),   place_form = character(0),   language = character(0),   place_translations = character(0),   lat_long = character(0),   ext_ids = character(0),   note_xrefs = character(0),   notes = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/Place.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a place structure object — Place","text":"place_name comma-separated string region names, ordered smallest largest. specific meaning element given @place_form, @default_place_form gedcom object @place_form defined. Elements left blank unknown, apply location, specific region question. example \"Baltimore, , Maryland, USA\". place_form comma-separated string jurisdictional titles, number elements @place_form. example \"City, County, State, Country\". language character string language tags defined BCP 47. place_translations named character vector translations place name. vector values must follow form @place_name vector names must language value defined @language. lat_long latitude longitude place, separated space. latitude coordinate direction North South equator degrees fraction degrees. longitude coordinate degrees fraction degrees East West zero base meridian coordinate. example: 18 degrees, 9 minutes, 3.4 seconds North, 168 degrees, 9 minutes, 3.4 seconds East formatted \"N18.150944 E168.150944\". ext_ids named character vector identifiers maintained external authority. names must given URI. See GEDCOM specification information. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Place.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a place structure object — Place","text":"S7 object representing GEDCOM PLACE_STRUCTURE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/RepositoryCitation.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a repository citation object — RepositoryCitation","title":"Create a repository citation object — RepositoryCitation","text":"Create repository citation object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/RepositoryCitation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a repository citation object — RepositoryCitation","text":"","code":"RepositoryCitation(   repo_xref = \"@VOID@\",   notes = list(),   note_xrefs = character(0),   call_numbers = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/RepositoryCitation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a repository citation object — RepositoryCitation","text":"repo_xref cross-reference identifier repository record. repository record, can left blank value \"@VOID@\" used. However, describe repository @notes. notes Associated notes. can either Note() object, list , character vector notes. note_xrefs character vector relevant note record cross-reference identifiers. call_numbers Call number(s) used file retrieve items repository. can either SourceCallNumber object, list , character vector call numbers.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/RepositoryCitation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a repository citation object — RepositoryCitation","text":"S7 object representing GEDCOM SOURCE_REPOSITORY_CITATION.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/RepositoryRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a repository record object — RepositoryRecord","title":"Create a repository record object — RepositoryRecord","text":"Create repository record object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/RepositoryRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a repository record object — RepositoryRecord","text":"","code":"RepositoryRecord(   XREF = \"@GEDCOMS7_ORPHAN@\",   confidential = FALSE,   locked = FALSE,   private = FALSE,   user_ids = character(0),   unique_ids = character(0),   ext_ids = character(0),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   created = NULL,   updated = NULL,   repo_name = character(0),   address = NULL,   phone_numbers = character(0),   emails = character(0),   faxes = character(0),   web_pages = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/RepositoryRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a repository record object — RepositoryRecord","text":"XREF cross-reference identifier record. edit maintenance done automatically. confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. user_ids character vector user-generated identifiers. type identifiers can given vector names, e.g. c(\"Driving license number\" = \"ABC123\") unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). ext_ids named character vector identifiers maintained external authority. names must given URI. See GEDCOM specification information. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations used. media_links used. created CreationDate() object containing date record created. Creating object parameters sets date today. updated ChangeDate() object containing date record updated. Creating object parameters sets date today. repo_name name repository. address address given either Address() object character string. written mailing label new lines separated \\n. phone_numbers character vector phone numbers. emails character vector email addresses. faxes character vector fax numbers. web_pages character vector web page URLs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/RepositoryRecord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a repository record object — RepositoryRecord","text":"S7 object representing GEDCOM REPOSITORY_RECORD.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceCallNumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a source call number object — SourceCallNumber","title":"Create a source call number object — SourceCallNumber","text":"Create source call number object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceCallNumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a source call number object — SourceCallNumber","text":"","code":"SourceCallNumber(   call_number = character(0),   medium = character(0),   medium_phrase = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceCallNumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a source call number object — SourceCallNumber","text":"call_number call number. medium value val_medium_types(). \"\" selected @medium_phrase must given. medium_phrase free text description medium. mandatory @medium \"\".","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceCallNumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a source call number object — SourceCallNumber","text":"S7 object representing CALN substructure GEDCOM SOURCE_REPOSITORY_CITATION.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceCitation.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a source citation object — SourceCitation","title":"Create a source citation object — SourceCitation","text":"Create source citation object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceCitation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a source citation object — SourceCitation","text":"","code":"SourceCitation(   sour_xref = \"@VOID@\",   where = character(0),   date = character(0),   source_text = list(),   fact_type = character(0),   fact_phrase = character(0),   role = character(0),   role_phrase = character(0),   certainty = character(0),   media_links = list(),   note_xrefs = character(0),   notes = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceCitation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a source citation object — SourceCitation","text":"sour_xref cross-reference identifier source record. source record, can left blank value \"@VOID@\" used. However, describe source @. specific location within information referenced. published work, include volume multi-volume work page number numbers. periodical, include volume, issue, page numbers. newspaper, include date, page number, column number. unpublished source micro‐ filmed works, film sheet number, page number, frame number. census record might enumerating district, page number, line number, dwelling number, family number. recommended data field formatted comma-separated label: value pairs date date given either formatted GEDCOM string, DateValue() object. source_text verbatim copy description contained within source. can either TranslationText() object, list , character vector text. fact_type code indicating type fact. must taken one val_individual_event_types(), val_individual_attribute_types(), val_family_event_types(), val_family_attribute_types(). generic event (\"EVEN\") attribute (\"FACT\") can also defined bespoke facts. See fact_rules_df() set rules surrounding codes allowed. fact_phrase Textual information expressed fact type. role role person played fact. role_phrase Textual information expressed role. certainty enumerated value indicating credibility piece information, based supporting evidence. systems use feature rank multiple conflicting opinions display likely information first. intended eliminate receivers’ need evaluate evidence . \"0\" = unreliable/estimated data \"1\" = Questionable reliability evidence \"2\" = Secondary evidence, data officially recorded sometime event \"3\" = Direct primary evidence used, dominance evidence media_links Associated multimedia. can either MediaLink() object, list , character vector XREFs multimedia records. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceCitation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a source citation object — SourceCitation","text":"S7 object representing GEDCOM SOURCE_CITATION.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a source record object — SourceRecord","title":"Create a source record object — SourceRecord","text":"Create source record object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a source record object — SourceRecord","text":"","code":"SourceRecord(   XREF = \"@GEDCOMS7_ORPHAN@\",   confidential = FALSE,   locked = FALSE,   private = FALSE,   user_ids = character(0),   unique_ids = character(0),   ext_ids = character(0),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   created = NULL,   updated = NULL,   facts_recorded = list(),   agency = character(0),   data_note_xrefs = character(0),   data_notes = list(),   originator = character(0),   full_title = character(0),   short_title = character(0),   publication_facts = character(0),   source_text = list(),   repo_citations = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a source record object — SourceRecord","text":"XREF cross-reference identifier record. edit maintenance done automatically. confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. user_ids character vector user-generated identifiers. type identifiers can given vector names, e.g. c(\"Driving license number\" = \"ABC123\") unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). ext_ids named character vector identifiers maintained external authority. names must given URI. See GEDCOM specification information. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations used. media_links Associated multimedia. can either MediaLink() object, list , character vector XREFs multimedia records. created CreationDate() object containing date record created. Creating object parameters sets date today. updated ChangeDate() object containing date record updated. Creating object parameters sets date today. facts_recorded facts recorded source. can either FactsRecorded object, list , character vector comma-delimited fact types. example, parish register births, deaths, marriages \"BIRT, DEAT, MARR\". val_fact_types() function gives list possible fact types. agency organization, institution, corporation, person, entity responsibility associated fact. Examples employer person associated occupation, educational establishment awarded scholastic award. data_note_xrefs character vector note record cross-reference identifiers relevant source data. data_notes Associated notes source data. can either Note object, list , character vector notes. originator person, agency, entity created record. published work, author, compiler, transcriber, abstractor, editor. unpublished source, may individual, government agency, church organization, private organization. full_title full title source. short_title shortened name source used sorting, filing, retrieving records. publication_facts record created. published works, includes information city publication, name publisher, year publication. source_text verbatim copy description contained within source. can either TranslationText() object, list , character vector text. repo_citations Associated repositories. can either RepositoryCitation object, list , character vector XREFs repository records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SourceRecord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a source record object — SourceRecord","text":"S7 object representing GEDCOM SOURCE_RECORD.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SpouseSealing.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a spouse sealing object — SpouseSealing","title":"Create a spouse sealing object — SpouseSealing","text":"Create spouse sealing object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SpouseSealing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a spouse sealing object — SpouseSealing","text":"","code":"SpouseSealing(   date = character(0),   temple_name = character(0),   place = NULL,   ord_state = character(0),   state_date = character(0),   state_time = character(0),   note_xrefs = character(0),   notes = list(),   citations = list() )"},{"path":"https://jl5000.github.io/gedcomS7/reference/SpouseSealing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a spouse sealing object — SpouseSealing","text":"date date given either formatted GEDCOM string, DateValue() object. temple_name name temple Church Jesus Christ Latter-day Saints. place associated place. can either Place() object character string (comma-separated string region names, ordered smallest largest). ord_state optional value val_ordinance_states(@ord_type). state_date ordinance date given either formatted GEDCOM string, DateExact object. state_time ordinance time given either formatted GEDCOM string, Time object. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SpouseSealing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a spouse sealing object — SpouseSealing","text":"S7 object representing GEDCOM LDS_SPOUSE_SEALING.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SubmitterRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a submitter record object — SubmitterRecord","title":"Create a submitter record object — SubmitterRecord","text":"Create submitter record object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SubmitterRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a submitter record object — SubmitterRecord","text":"","code":"SubmitterRecord(   XREF = \"@GEDCOMS7_ORPHAN@\",   confidential = FALSE,   locked = FALSE,   private = FALSE,   user_ids = character(0),   unique_ids = character(0),   ext_ids = character(0),   note_xrefs = character(0),   notes = list(),   citations = list(),   media_links = list(),   created = NULL,   updated = NULL,   subm_name = character(0),   address = NULL,   phone_numbers = character(0),   emails = character(0),   faxes = character(0),   web_pages = character(0),   languages = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/SubmitterRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a submitter record object — SubmitterRecord","text":"XREF cross-reference identifier record. edit maintenance done automatically. confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. user_ids character vector user-generated identifiers. type identifiers can given vector names, e.g. c(\"Driving license number\" = \"ABC123\") unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). ext_ids named character vector identifiers maintained external authority. names must given URI. See GEDCOM specification information. note_xrefs character vector relevant note record cross-reference identifiers. notes Associated notes. can either Note() object, list , character vector notes. citations used. media_links Associated multimedia. can either MediaLink() object, list , character vector XREFs multimedia records. created CreationDate() object containing date record created. Creating object parameters sets date today. updated ChangeDate() object containing date record updated. Creating object parameters sets date today. subm_name name submitter. address address given either Address() object character string. written mailing label new lines separated \\n. phone_numbers character vector phone numbers. emails character vector email addresses. faxes character vector fax numbers. web_pages character vector web page URLs. languages character vector language tags defined BCP 47.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/SubmitterRecord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a submitter record object — SubmitterRecord","text":"S7 object representing GEDCOM SUBMITTER_RECORD.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Time.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a time object — Time","title":"Create a time object — Time","text":"Create time object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a time object — Time","text":"","code":"Time(   hour = integer(0),   minute = integer(0),   second = integer(0),   fraction = integer(0),   utc = TRUE )"},{"path":"https://jl5000.github.io/gedcomS7/reference/Time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a time object — Time","text":"hour hour day given integer 0 23. minute minute hour given integer 0 59. second second minute given integer 0 59. fraction fraction second given integer. utc Whether time Coordinated Universal Time (UTC) (TRUE, default) local time (FALSE).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/Time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a time object — Time","text":"S7 object representing GEDCOM time.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/TranslationText.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a text translation object — TranslationText","title":"Create a text translation object — TranslationText","text":"Create text translation object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/TranslationText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a text translation object — TranslationText","text":"","code":"TranslationText(   text = character(0),   language = character(0),   media_type = character(0) )"},{"path":"https://jl5000.github.io/gedcomS7/reference/TranslationText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a text translation object — TranslationText","text":"text character string. New lines created \\n. language character string language tags defined BCP 47. media_type media type defined RFC 2045.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/TranslationText.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a text translation object — TranslationText","text":"S7 object representing GEDCOM text translation substructure.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Create children records for a family — add_children","title":"Create children records for a family — add_children","text":"Create children records family","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create children records for a family — add_children","text":"","code":"add_children(x, xref, sexes, chil_names = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/add_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create children records for a family — add_children","text":"x gedcom object. xref xref Family record. sexes character string giving sexes child. example, \"FFM\" add two daughters one son. chil_names character vector children's names. provided, must length number sexes. want provide name child, set name \"\". Surnames must enclosed forward slashes. names supply contain forward slashes surnames taken father (mother).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create children records for a family — add_children","text":"gedcom object additional child records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Add parent records for an individual — add_parents","title":"Add parent records for an individual — add_parents","text":"function adds records individual's parents.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add parent records for an individual — add_parents","text":"","code":"add_parents(x, xref, inc_sex = TRUE, fath_name = NULL, moth_name = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/add_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add parent records for an individual — add_parents","text":"x gedcom object. xref xref Individual record. inc_sex Whether populate sex parents. ensure one male one female parent. Otherwise sex assigned \"U\" (undetermined). fath_name, moth_name Optional names give parents. Surnames must enclosed forward slashes.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add parent records for an individual — add_parents","text":"gedcom object additional parent records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_parents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add parent records for an individual — add_parents","text":"function may also create Family record modify existing parents.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_siblings.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sibling records for an individual — add_siblings","title":"Create sibling records for an individual — add_siblings","text":"Create sibling records individual","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_siblings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sibling records for an individual — add_siblings","text":"","code":"add_siblings(x, xref, sexes, sib_names = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/add_siblings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create sibling records for an individual — add_siblings","text":"x gedcom object. xref xref Individual record. sexes character string giving sexes sibling. example, \"FFM\" add two sisters one brother. sib_names character vector sibling's names. provided, must length number sexes. want provide name sibling, set name \"\". Surnames must enclosed forward slashes. names supply contain forward slashes surnames taken father (mother).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_siblings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create sibling records for an individual — add_siblings","text":"gedcom object additional sibling records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_siblings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create sibling records for an individual — add_siblings","text":"function may also create Family record modify existing siblings.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_spouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a spouse record for an individual — add_spouse","title":"Add a spouse record for an individual — add_spouse","text":"creates record spouse potentially Family record.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_spouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a spouse record for an individual — add_spouse","text":"","code":"add_spouse(x, xref, sex = \"U\", spou_name = NULL, fam_xref = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/add_spouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a spouse record for an individual — add_spouse","text":"x gedcom object. xref xref Individual record. sex sex spouse. spou_name Optional name give spouse. Surnames must enclosed forward slashes. fam_xref cross-reference identifier Family record already exists. provided, new Family record created.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/add_spouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a spouse record for an individual — add_spouse","text":"gedcom object additional spouse Family records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/check_for_xref_mentions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check gedcom lines for inappropriate mentions of xrefs — check_for_xref_mentions","title":"Check gedcom lines for inappropriate mentions of xrefs — check_for_xref_mentions","text":"Check gedcom lines inappropriate mentions xrefs","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/check_for_xref_mentions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check gedcom lines for inappropriate mentions of xrefs — check_for_xref_mentions","text":"","code":"check_for_xref_mentions(lines)"},{"path":"https://jl5000.github.io/gedcomS7/reference/check_for_xref_mentions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check gedcom lines for inappropriate mentions of xrefs — check_for_xref_mentions","text":"lines character vector gedcom lines.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/check_for_xref_mentions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check gedcom lines for inappropriate mentions of xrefs — check_for_xref_mentions","text":"Nothing. applicable, function result warning inappropriate mentions xrefs found.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_choice.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an input against a set of valid values. — chk_input_choice","title":"Validate an input against a set of valid values. — chk_input_choice","text":"Validate input set valid values.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_choice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an input against a set of valid values. — chk_input_choice","text":"","code":"chk_input_choice(input, choices)"},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_choice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an input against a set of valid values. — chk_input_choice","text":"input input. choices vector valid values.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_choice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate an input against a set of valid values. — chk_input_choice","text":"Either character string giving error message, NULL.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_date_cpts.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a date by its components — chk_input_date_cpts","title":"Validate a date by its components — chk_input_date_cpts","text":"Validate date components","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_date_cpts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a date by its components — chk_input_date_cpts","text":"","code":"chk_input_date_cpts(year, month, day, bce = FALSE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_date_cpts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a date by its components — chk_input_date_cpts","text":"year year. month month. day day. bce Whether date occurs common era.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_date_cpts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a date by its components — chk_input_date_cpts","text":"Either character string giving error message, NULL.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a date range/period — chk_input_dates","title":"Validate a date range/period — chk_input_dates","text":"Validate date range/period","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a date range/period — chk_input_dates","text":"","code":"chk_input_dates(start_date, end_date)"},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a date range/period — chk_input_dates","text":"start_date start date given either DateGregorian GEDCOM date string. end_date end date given either DateGregorian GEDCOM date string.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a date range/period — chk_input_dates","text":"Either character string giving error message, NULL.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the existence of an input's parent value — chk_input_parents","title":"Validate the existence of an input's parent value — chk_input_parents","text":"Validate existence input's parent value","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the existence of an input's parent value — chk_input_parents","text":"","code":"chk_input_parents(input, name, parent, parent_name)"},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the existence of an input's parent value — chk_input_parents","text":"input input. name input name. parent parent input. parent_name name parent input used error messages.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the existence of an input's parent value — chk_input_parents","text":"Either character string giving error message, NULL.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the regex pattern(s) of a character vector — chk_input_pattern","title":"Validate the regex pattern(s) of a character vector — chk_input_pattern","text":"Validate regex pattern(s) character vector","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the regex pattern(s) of a character vector — chk_input_pattern","text":"","code":"chk_input_pattern(input, pattern)"},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the regex pattern(s) of a character vector — chk_input_pattern","text":"input input. pattern regex pattern element must match.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the regex pattern(s) of a character vector — chk_input_pattern","text":"Either character string giving error message, NULL.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_phrase.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the existence of a subordinate phrase — chk_input_phrase","title":"Validate the existence of a subordinate phrase — chk_input_phrase","text":"Validate existence subordinate phrase","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_phrase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the existence of a subordinate phrase — chk_input_phrase","text":"","code":"chk_input_phrase(input, name, parent, parent_name, parent_val)"},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_phrase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the existence of a subordinate phrase — chk_input_phrase","text":"input value phrase input. name phrase input name. parent parent input. parent_name name parent input used error messages. parent_val value parent input requires subordinate phrase.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_phrase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the existence of a subordinate phrase — chk_input_phrase","text":"Either character string giving error message, NULL.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the size of an input — chk_input_size","title":"Validate the size of an input — chk_input_size","text":"Validate size input","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the size of an input — chk_input_size","text":"","code":"chk_input_size(   input,   min_len = NULL,   max_len = NULL,   min_val = NULL,   max_val = NULL )"},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the size of an input — chk_input_size","text":"input input. min_len minimum number elements input . max_len maximum number elements input . min_val minimum number characters value input (depending input type). max_val maximum number characters value input (depending input type).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_input_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the size of an input — chk_input_size","text":"Either character string giving error message, NULL.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_whole_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an numeric input to be a whole number — chk_whole_number","title":"Validate an numeric input to be a whole number — chk_whole_number","text":"Validate numeric input whole number","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_whole_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an numeric input to be a whole number — chk_whole_number","text":"","code":"chk_whole_number(input)"},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_whole_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an numeric input to be a whole number — chk_whole_number","text":"input input.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chk_whole_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate an numeric input to be a whole number — chk_whole_number","text":"Either character string giving error message, NULL.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chronify.html","id":null,"dir":"Reference","previous_headings":"","what":"Force a vector to be a length 1 character vector — chronify","title":"Force a vector to be a length 1 character vector — chronify","text":"name comes 'Chr-one-ify'.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chronify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force a vector to be a length 1 character vector — chronify","text":"","code":"chronify(x)"},{"path":"https://jl5000.github.io/gedcomS7/reference/chronify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force a vector to be a length 1 character vector — chronify","text":"x atomic vector length.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/chronify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force a vector to be a length 1 character vector — chronify","text":"character vector length one. either empty string zero length input, takes value first element.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/combine_cont_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine continuation lines into the parent line — combine_cont_lines","title":"Combine continuation lines into the parent line — combine_cont_lines","text":"Combine continuation lines parent line","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/combine_cont_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine continuation lines into the parent line — combine_cont_lines","text":"","code":"combine_cont_lines(lines)"},{"path":"https://jl5000.github.io/gedcomS7/reference/combine_cont_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine continuation lines into the parent line — combine_cont_lines","text":"lines character vector gedcom lines.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/combine_cont_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine continuation lines into the parent line — combine_cont_lines","text":"new character vector gedcom lines.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/date_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the number of years between two dates — date_diff","title":"Determine the number of years between two dates — date_diff","text":"Determine number years two dates","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/date_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the number of years between two dates — date_diff","text":"","code":"date_diff(date1, date2 = NULL, minimise = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/date_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the number of years between two dates — date_diff","text":"date1 GEDCOM date string. date2 GEDCOM date string. date given, today's date used. minimise date ranges periods used dates, whether choose bounds assume minimum date difference. FALSE, maximum date difference assumed.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/date_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the number of years between two dates — date_diff","text":"numeric value giving number years. numeric value less zero means determination made.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/date_exact_current.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GEDCOM Exact Date object for today — date_exact_current","title":"Create a GEDCOM Exact Date object for today — date_exact_current","text":"Create GEDCOM Exact Date object today","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/date_exact_current.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GEDCOM Exact Date object for today — date_exact_current","text":"","code":"date_exact_current()"},{"path":"https://jl5000.github.io/gedcomS7/reference/date_exact_current.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GEDCOM Exact Date object for today — date_exact_current","text":"S7 object representing GEDCOM Exact Date today.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/delete_ged_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a structure from GEDCOM lines — delete_ged_section","title":"Delete a structure from GEDCOM lines — delete_ged_section","text":"Delete structure GEDCOM lines","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/delete_ged_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a structure from GEDCOM lines — delete_ged_section","text":"","code":"delete_ged_section(lines, line_no, containing_line = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/delete_ged_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a structure from GEDCOM lines — delete_ged_section","text":"lines character vector GEDCOM lines. line_no line number structure located. containing_line Whether line number first line structure whether line number references line within structure (one level lower).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/delete_ged_section.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a structure from GEDCOM lines — delete_ged_section","text":"character vector GEDCOM lines without structure referenced line_no.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/delete_ged_sections.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete potentially multiple structures from GEDCOM lines — delete_ged_sections","title":"Delete potentially multiple structures from GEDCOM lines — delete_ged_sections","text":"Delete potentially multiple structures GEDCOM lines","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/delete_ged_sections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete potentially multiple structures from GEDCOM lines — delete_ged_sections","text":"","code":"delete_ged_sections(lines, line_fn, containing_line = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/delete_ged_sections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete potentially multiple structures from GEDCOM lines — delete_ged_sections","text":"lines character vector GEDCOM lines. line_fn callback function takes single input, lines, returns integer vector identifying row structure deleted. containing_line Whether line number(s) returned callback first line structure(s) whether line number(s) reference line within structure (one level lower).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/delete_ged_sections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete potentially multiple structures from GEDCOM lines — delete_ged_sections","text":"character vector GEDCOM lines without structures identified callback function.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/df_fam_facts.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise a family's attributes/events in a dataframe — df_fam_facts","title":"Summarise a family's attributes/events in a dataframe — df_fam_facts","text":"Summarise family's attributes/events dataframe","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/df_fam_facts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise a family's attributes/events in a dataframe — df_fam_facts","text":"","code":"df_fam_facts(x, xref)"},{"path":"https://jl5000.github.io/gedcomS7/reference/df_fam_facts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise a family's attributes/events in a dataframe — df_fam_facts","text":"x gedcom object. xref cross-reference identifier family record.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/df_fam_facts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise a family's attributes/events in a dataframe — df_fam_facts","text":"dataframe summarising attribute/event row.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/df_indi.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise records of a particular type in a dataframe — df_indi","title":"Summarise records of a particular type in a dataframe — df_indi","text":"Summarise records particular type dataframe","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/df_indi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise records of a particular type in a dataframe — df_indi","text":"","code":"df_indi(x, xrefs = NULL)  df_fam(x, xrefs = NULL)  df_sour(x, xrefs = NULL)  df_repo(x, xrefs = NULL)  df_media(x, xrefs = NULL)  df_note(x, xrefs = NULL)  df_subm(x, xrefs = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/df_indi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise records of a particular type in a dataframe — df_indi","text":"x gedcom object. xrefs vector xrefs summarise. left NULL, relevant xrefs used.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/df_indi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise records of a particular type in a dataframe — df_indi","text":"dataframe summarising record row.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/df_indi_facts.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise an individual's attributes/events in a dataframe — df_indi_facts","title":"Summarise an individual's attributes/events in a dataframe — df_indi_facts","text":"Summarise individual's attributes/events dataframe","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/df_indi_facts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise an individual's attributes/events in a dataframe — df_indi_facts","text":"","code":"df_indi_facts(x, xref)"},{"path":"https://jl5000.github.io/gedcomS7/reference/df_indi_facts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise an individual's attributes/events in a dataframe — df_indi_facts","text":"x gedcom object. xref cross-reference identifier individual record.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/df_indi_facts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise an individual's attributes/events in a dataframe — df_indi_facts","text":"dataframe summarising attribute/event row.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/fact_rules_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Property requirements for fact objects. — fact_rules_df","title":"Property requirements for fact objects. — fact_rules_df","text":"Property requirements fact objects.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/fact_rules_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Property requirements for fact objects. — fact_rules_df","text":"","code":"fact_rules_df(type = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/fact_rules_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Property requirements for fact objects. — fact_rules_df","text":"type character string filter table.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/fact_rules_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Property requirements for fact objects. — fact_rules_df","text":"dataframe detailing property requirements type fact.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_ancestors.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all ancestors for an individual — get_ancestors","title":"Identify all ancestors for an individual — get_ancestors","text":"function identifies records entire branch family tree certain individual.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_ancestors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all ancestors for an individual — get_ancestors","text":"","code":"get_ancestors(   x,   xref,   inc_indi = FALSE,   inc_sibs = FALSE,   inc_fam = FALSE,   inc_supp = FALSE,   pedigrees = NULL )"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_ancestors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all ancestors for an individual — get_ancestors","text":"x gedcom object. xref xref Individual record. inc_indi Whether also include individual . inc_sibs Whether also include siblings ancestors (siblings individual included individual included). inc_fam Whether also include Family records individual child (ancestors' Family records). inc_supp Whether also include supporting records (Note, Source, Repository, Multimedia). pedigrees character vector allowed family-child linkages. default, NULL means pedigrees (e.g. inc. ADOPTED). includes \"BIRTH\" also pick non-existent values (since BIRTH assumed default).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_ancestors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all ancestors for an individual — get_ancestors","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_descendants.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all descendants for an individual — get_descendants","title":"Identify all descendants for an individual — get_descendants","text":"function identifies records entire branch family tree certain individual.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_descendants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all descendants for an individual — get_descendants","text":"","code":"get_descendants(   x,   xref,   inc_indi = FALSE,   inc_part = FALSE,   inc_fam = FALSE,   inc_supp = FALSE,   pedigrees = NULL )"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_descendants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all descendants for an individual — get_descendants","text":"x gedcom object. xref xref Individual record. inc_indi Whether also include individual . inc_part Whether also include partners individual (descendants descendants' partners). inc_fam Whether also include Family records individual partner (descendants' Family records). inc_supp Whether also include supporting records (Note, Source, Repository, Multimedia). pedigrees character vector allowed family-child linkages. default, NULL means pedigrees (e.g. inc. ADOPTED). includes \"BIRTH\" also pick non-existent values (since BIRTH assumed default).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_descendants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all descendants for an individual — get_descendants","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_as_child.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all families for an individual where they are a child — get_fam_as_child","title":"Identify all families for an individual where they are a child — get_fam_as_child","text":"Identify families individual child","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_as_child.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all families for an individual where they are a child — get_fam_as_child","text":"","code":"get_fam_as_child(x, xref, pedigrees = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_as_child.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all families for an individual where they are a child — get_fam_as_child","text":"x gedcom object. xref xref Individual record. pedigrees character vector allowed family-child linkages. default, NULL means pedigrees (e.g. inc. ADOPTED). includes \"BIRTH\" also pick non-existent values (since BIRTH assumed default).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_as_child.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all families for an individual where they are a child — get_fam_as_child","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_as_spouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all families for an individual where they are a partner — get_fam_as_spouse","title":"Identify all families for an individual where they are a partner — get_fam_as_spouse","text":"Identify families individual partner","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_as_spouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all families for an individual where they are a partner — get_fam_as_spouse","text":"","code":"get_fam_as_spouse(x, xref)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_as_spouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all families for an individual where they are a partner — get_fam_as_spouse","text":"x gedcom object. xref xref Individual record.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_as_spouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all families for an individual where they are a partner — get_fam_as_spouse","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all children in a family — get_fam_children","title":"Identify all children in a family — get_fam_children","text":"Identify children family","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all children in a family — get_fam_children","text":"","code":"get_fam_children(x, xref, pedigrees = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all children in a family — get_fam_children","text":"x gedcom object. xref xref Family record. pedigrees character vector allowed family-child linkages. default, NULL means pedigrees (e.g. inc. ADOPTED). includes \"BIRTH\" also pick non-existent values (since BIRTH assumed default).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all children in a family — get_fam_children","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_partners.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all partners in a family — get_fam_partners","title":"Identify all partners in a family — get_fam_partners","text":"Identify partners family","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_partners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all partners in a family — get_fam_partners","text":"","code":"get_fam_partners(x, xref)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_partners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all partners in a family — get_fam_partners","text":"x gedcom object. xref xref Family record.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_fam_partners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all partners in a family — get_fam_partners","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all children for an individual — get_indi_children","title":"Identify all children for an individual — get_indi_children","text":"Identify children individual","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all children for an individual — get_indi_children","text":"","code":"get_indi_children(x, xref, pedigrees = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all children for an individual — get_indi_children","text":"x gedcom object. xref xref Individual record. pedigrees character vector allowed family-child linkages. default, NULL means pedigrees (e.g. inc. ADOPTED). includes \"BIRTH\" also pick non-existent values (since BIRTH assumed default).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all children for an individual — get_indi_children","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_cousins.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all cousins for an individual — get_indi_cousins","title":"Identify all cousins for an individual — get_indi_cousins","text":"Identify cousins individual","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_cousins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all cousins for an individual — get_indi_cousins","text":"","code":"get_indi_cousins(x, xref, degree = 1, inc_half = FALSE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_cousins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all cousins for an individual — get_indi_cousins","text":"x gedcom object. xref xref Individual record. degree Whether return first cousins (degree = 1), second cousins (degree = 2), etc. inc_half Whether include half cousins.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_cousins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all cousins for an individual — get_indi_cousins","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_fathers.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all fathers for an individual — get_indi_fathers","title":"Identify all fathers for an individual — get_indi_fathers","text":"Identify fathers individual","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_fathers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all fathers for an individual — get_indi_fathers","text":"","code":"get_indi_fathers(x, xref, pedigrees = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_fathers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all fathers for an individual — get_indi_fathers","text":"x gedcom object. xref xref Individual record. pedigrees character vector allowed family-child linkages. default, NULL means pedigrees (e.g. inc. ADOPTED). includes \"BIRTH\" also pick non-existent values (since BIRTH assumed default).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_fathers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all fathers for an individual — get_indi_fathers","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_mothers.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all mothers for an individual — get_indi_mothers","title":"Identify all mothers for an individual — get_indi_mothers","text":"Identify mothers individual","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_mothers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all mothers for an individual — get_indi_mothers","text":"","code":"get_indi_mothers(x, xref, pedigrees = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_mothers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all mothers for an individual — get_indi_mothers","text":"x gedcom object. xref xref Individual record. pedigrees character vector allowed family-child linkages. default, NULL means pedigrees (e.g. inc. ADOPTED). includes \"BIRTH\" also pick non-existent values (since BIRTH assumed default).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_mothers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all mothers for an individual — get_indi_mothers","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all parents for an individual — get_indi_parents","title":"Identify all parents for an individual — get_indi_parents","text":"Identify parents individual","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all parents for an individual — get_indi_parents","text":"","code":"get_indi_parents(x, xref, pedigrees = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all parents for an individual — get_indi_parents","text":"x gedcom object. xref xref Individual record. pedigrees character vector allowed family-child linkages. default, NULL means pedigrees (e.g. inc. ADOPTED). includes \"BIRTH\" also pick non-existent values (since BIRTH assumed default).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all parents for an individual — get_indi_parents","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_partners.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all partners for an individual — get_indi_partners","title":"Identify all partners for an individual — get_indi_partners","text":"Identify partners individual","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_partners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all partners for an individual — get_indi_partners","text":"","code":"get_indi_partners(x, xref)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_partners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all partners for an individual — get_indi_partners","text":"x gedcom object. xref xref Individual record.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_partners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all partners for an individual — get_indi_partners","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_siblings.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all siblings for an individual — get_indi_siblings","title":"Identify all siblings for an individual — get_indi_siblings","text":"Identify siblings individual","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_siblings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all siblings for an individual — get_indi_siblings","text":"","code":"get_indi_siblings(x, xref, pedigrees = NULL, inc_half = FALSE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_siblings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all siblings for an individual — get_indi_siblings","text":"x gedcom object. xref xref Individual record. pedigrees character vector allowed family-child linkages. default, NULL means pedigrees (e.g. inc. ADOPTED). includes \"BIRTH\" also pick non-existent values (since BIRTH assumed default). inc_half Whether include siblings share one parent.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_indi_siblings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all siblings for an individual — get_indi_siblings","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_records_by_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all records that contain a pattern — get_records_by_pattern","title":"Identify all records that contain a pattern — get_records_by_pattern","text":"Identify records contain pattern","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_records_by_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all records that contain a pattern — get_records_by_pattern","text":"","code":"get_records_by_pattern(x, pattern, return_context = FALSE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_records_by_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all records that contain a pattern — get_records_by_pattern","text":"x gedcom object. pattern regular expression. Case ignored. return_context Whether return named list matching lines GEDCOM (TRUE) just xrefs (FALSE, default).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_records_by_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all records that contain a pattern — get_records_by_pattern","text":"Either vector matching xrefs, named list matching GEDCOM lines.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_supporting_recs.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all supporting records for a set of records — get_supporting_recs","title":"Identify all supporting records for a set of records — get_supporting_recs","text":"function gets supporting records (onwards dependencies) set records. Supporting records note, multimedia, source, submitter repository records, .e. providing supporting evidence comments.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_supporting_recs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all supporting records for a set of records — get_supporting_recs","text":"","code":"get_supporting_recs(   x,   xrefs,   inc_note = TRUE,   inc_media = TRUE,   inc_sour = TRUE,   inc_repo = TRUE,   inc_subm = TRUE )"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_supporting_recs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all supporting records for a set of records — get_supporting_recs","text":"x gedcom object. xrefs xrefs records get supporting records . inc_note Whether include Note records. inc_media Whether include Multimedia records. inc_sour Whether include Source records. inc_repo Whether include Repository records. inc_subm Whether include Submitter records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_supporting_recs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all supporting records for a set of records — get_supporting_recs","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_unused_recs.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify unreferenced records — get_unused_recs","title":"Identify unreferenced records — get_unused_recs","text":"function identifies records referenced records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_unused_recs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify unreferenced records — get_unused_recs","text":"","code":"get_unused_recs(x)"},{"path":"https://jl5000.github.io/gedcomS7/reference/get_unused_recs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify unreferenced records — get_unused_recs","text":"x gedcom object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_unused_recs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify unreferenced records — get_unused_recs","text":"character vector xrefs.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/get_unused_recs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify unreferenced records — get_unused_recs","text":"expect every record referenced another way. example, Individual records reference Family records (vice-versa), Repository records referenced Source records, Source records cited records.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/increase_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Increase the level of a vector of GEDCOM lines — increase_level","title":"Increase the level of a vector of GEDCOM lines — increase_level","text":"Increase level vector GEDCOM lines","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/increase_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Increase the level of a vector of GEDCOM lines — increase_level","text":"","code":"increase_level(ged, by = 1)"},{"path":"https://jl5000.github.io/gedcomS7/reference/increase_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Increase the level of a vector of GEDCOM lines — increase_level","text":"ged character vector GEDCOM lines. number levels increment.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/increase_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Increase the level of a vector of GEDCOM lines — increase_level","text":"vector GEDCOM lines incremented levels.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/lookups.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup values — val_record_types","title":"Lookup values — val_record_types","text":"Lookup values","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/lookups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup values — val_record_types","text":"","code":"val_record_types()  val_adoptive_parents()  val_individual_attribute_types(inc_generic = FALSE)  val_individual_event_types(inc_generic = FALSE)  val_family_event_types(inc_generic = FALSE)  val_family_attribute_types(inc_generic = FALSE)  val_event_types(inc_generic = FALSE)  val_attribute_types(inc_generic = FALSE)  val_fact_types(inc_generic = FALSE)  val_individual_ordinance_types()  val_family_ordinance_types()  val_ordinance_states(ord_type)  val_medium_types()  val_pedigree_types()  val_certainty()  val_restriction()  val_roles()  val_sexes()  val_confidence_types()  val_name_types()"},{"path":"https://jl5000.github.io/gedcomS7/reference/lookups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup values — val_record_types","text":"inc_generic Whether include generic facts. ord_type One values val_individual_ordinance_types() val_family_ordinance_types().","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/lookups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup values — val_record_types","text":"vector allowed values.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/new_gedcom.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new GEDCOM object — new_gedcom","title":"Create a new GEDCOM object — new_gedcom","text":"Create new GEDCOM object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/new_gedcom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new GEDCOM object — new_gedcom","text":"","code":"new_gedcom(my_language = \"en\")"},{"path":"https://jl5000.github.io/gedcomS7/reference/new_gedcom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new GEDCOM object — new_gedcom","text":"my_language primary language data stored. language code adhere BCP 47.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/new_gedcom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new GEDCOM object — new_gedcom","text":"minimal gedcom S7 object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/new_gedcom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new GEDCOM object — new_gedcom","text":"See documentation GedcomS7() GedcomSource() object properties.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/obj_to_ged.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an input into a vector of GEDCOM lines — obj_to_ged","title":"Convert an input into a vector of GEDCOM lines — obj_to_ged","text":"Convert input vector GEDCOM lines","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/obj_to_ged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an input into a vector of GEDCOM lines — obj_to_ged","text":"","code":"obj_to_ged(obj, tag = NULL)"},{"path":"https://jl5000.github.io/gedcomS7/reference/obj_to_ged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an input into a vector of GEDCOM lines — obj_to_ged","text":"obj Either atomic vector, S7 class object, list. S7 class objects must GEDCOM() method. tag obj contains atomic elements, specify tag recorded .","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/obj_to_ged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an input into a vector of GEDCOM lines — obj_to_ged","text":"vector GEDCOM lines.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_common_record_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse common elements into a record object — parse_common_record_elements","title":"Parse common elements into a record object — parse_common_record_elements","text":"Parse common elements record object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_common_record_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse common elements into a record object — parse_common_record_elements","text":"","code":"parse_common_record_elements(rec, rec_lines)"},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_common_record_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse common elements into a record object — parse_common_record_elements","text":"rec S7 record object. rec_lines character vector lines GEDCOM record.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_common_record_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse common elements into a record object — parse_common_record_elements","text":"S7 record object common elements added properties.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_gedcom_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a GEDCOM age at event into decimalised years — parse_gedcom_age","title":"Convert a GEDCOM age at event into decimalised years — parse_gedcom_age","text":"Convert GEDCOM age event decimalised years","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_gedcom_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a GEDCOM age at event into decimalised years — parse_gedcom_age","text":"","code":"parse_gedcom_age(age_string)"},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_gedcom_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a GEDCOM age at event into decimalised years — parse_gedcom_age","text":"age_string string describing age event, e.g. \"14y 3m 1w 2d\".","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_gedcom_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a GEDCOM age at event into decimalised years — parse_gedcom_age","text":"numeric value giving age years.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_gedcom_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a GEDCOM date into a date object — parse_gedcom_date","title":"Convert a GEDCOM date into a date object — parse_gedcom_date","text":"Convert GEDCOM date date object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_gedcom_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a GEDCOM date into a date object — parse_gedcom_date","text":"","code":"parse_gedcom_date(date_string, minimise = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_gedcom_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a GEDCOM date into a date object — parse_gedcom_date","text":"date_string GEDCOM date value string. minimise Whether fill missing date pieces date minimised. example, month given, January used. minimise = FALSE, December used.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/parse_gedcom_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a GEDCOM date into a date object — parse_gedcom_date","text":"date.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/prepare_gedcom_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare GEDCOM lines for export — prepare_gedcom_lines","title":"Prepare GEDCOM lines for export — prepare_gedcom_lines","text":"Prepare GEDCOM lines export","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/prepare_gedcom_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare GEDCOM lines for export — prepare_gedcom_lines","text":"","code":"prepare_gedcom_lines(lines)"},{"path":"https://jl5000.github.io/gedcomS7/reference/prepare_gedcom_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare GEDCOM lines for export — prepare_gedcom_lines","text":"lines character vector gedcom lines.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/prepare_gedcom_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare GEDCOM lines for export — prepare_gedcom_lines","text":"vector GEDCOM lines ready export.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/prop_definitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Define properties in GEDCOM 7.0 specification — prop_definitions","title":"Define properties in GEDCOM 7.0 specification — prop_definitions","text":"Define common properties used S7 classes.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/prop_definitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define properties in GEDCOM 7.0 specification — prop_definitions","text":"text character string. New lines created \\n. language character string language tags defined BCP 47. media_type media type defined RFC 2045. translations TranslationText() object list . One alternate translation text. title title multimedia record. source_text verbatim copy description contained within source. can either TranslationText() object, list , character vector text. fact_type code indicating type fact. must taken one val_individual_event_types(), val_individual_attribute_types(), val_family_event_types(), val_family_attribute_types(). generic event (\"EVEN\") attribute (\"FACT\") can also defined bespoke facts. See fact_rules_df() set rules surrounding codes allowed. fact_val value associated fact. example \"NCHI\" number children. See fact_rules_df() set rules surrounding need values values allowed. fact_desc classification fact. required generic events attributes. See fact_rules_df() set rules surrounding need . medium value val_medium_types(). \"\" selected @medium_phrase must given. medium_phrase free text description medium. mandatory @medium \"\". media_alt named vector media alternative media forms, c(form = location) pers_name full name individual. Surnames enclosed forward slashes. name_pieces PersonalNamePieces() object defining pieces full name. place associated place. can either Place() object character string (comma-separated string region names, ordered smallest largest). address address given either Address() object character string. written mailing label new lines separated \\n. phone_numbers character vector phone numbers. emails character vector email addresses. faxes character vector fax numbers. web_pages character vector web page URLs. agency organization, institution, corporation, person, entity responsibility associated fact. Examples employer person associated occupation, educational establishment awarded scholastic award. relig_affil religious denomination associated fact. cause Used special cases record reasons precipitated fact (e.g. cause death). confidential logical value indicating whether associated record/fact treated confidential. allows excluded export. locked logical value indicating whether associated record/fact treated read-. private logical value indicating whether associated record/fact treated private. allows excluded export. associations Associated individuals. can either Association() object list . age character string indicates age years, months, weeks /days individual time fact. combination permitted. labels must come corresponding number, example; \"4y 8m 1w 3d\". Age bounds can also included, example; \"< 40y\". age fit format describe age corresponding phrase parameter. husb_age character string indicates age years, months, weeks /days husband time fact. combination permitted. labels must come corresponding number, example; \"4y 8m 1w 3d\". Age bounds can also included, example; \"< 40y\". age fit format describe age corresponding phrase parameter. wife_age character string indicates age years, months, weeks /days wife time fact. combination permitted. labels must come corresponding number, example; \"4y 8m 1w 3d\". Age bounds can also included, example; \"< 40y\". age fit format describe age corresponding phrase parameter. age_phrase Free text information expressed individual's age. husb_age_phrase Free text information expressed husband's age. wife_age_phrase Free text information expressed wife's age. temple_name name temple Church Jesus Christ Latter-day Saints. ord_state optional value val_ordinance_states(@ord_type). state_date ordinance date given either formatted GEDCOM string, DateExact object. state_time ordinance time given either formatted GEDCOM string, Time object. XREF cross-reference identifier record. edit maintenance done automatically. fam_xref cross-reference identifier family record. note_xrefs character vector relevant note record cross-reference identifiers. subm_xrefs character vector relevant submitter record cross-reference identifiers. unique_ids character vector enduring globally-unique identifiers. need formatted line RFC 4122 can generated uuid::UUIDgenerate(). user_ids character vector user-generated identifiers. type identifiers can given vector names, e.g. c(\"Driving license number\" = \"ABC123\") ext_ids named character vector identifiers maintained external authority. names must given URI. See GEDCOM specification information. media_links Associated multimedia. can either MediaLink() object, list , character vector XREFs multimedia records. notes Associated notes. can either Note() object, list , character vector notes. citations Associated sources. can either SourceCitation() object, list , character vector XREFs source records. year year given integer (greater 0). month month year given integer 1 12. day day month given integer 1 31. date_exact exact date given either formatted GEDCOM string, DateExact() object. given, default today's date. date_period date period given either formatted GEDCOM string, DatePeriod() object. date date given either formatted GEDCOM string, DateValue() object. date_sort date given either formatted GEDCOM string, DateSorting() object. date_phrase Textual information expressed date. start_date start period/range given either formatted GEDCOM string, DateGregorian() object. end_date end period/range given either formatted GEDCOM string, DateGregorian() object. time time given either formatted GEDCOM string, Time() object. created CreationDate() object containing date record created. Creating object parameters sets date today. updated ChangeDate() object containing date record updated. Creating object parameters sets date today.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/prop_definitions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define properties in GEDCOM 7.0 specification — prop_definitions","text":"empty function serves single location shared properties defined, mainly efficiency maintainability.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/pull_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull a record from a GEDCOM object for editing — pull_record","title":"Pull a record from a GEDCOM object for editing — pull_record","text":"Pull record GEDCOM object editing","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/pull_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull a record from a GEDCOM object for editing — pull_record","text":"","code":"pull_record(x, xref)"},{"path":"https://jl5000.github.io/gedcomS7/reference/pull_record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull a record from a GEDCOM object for editing — pull_record","text":"x gedcom object. xref xref record pull.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/pull_record.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull a record from a GEDCOM object for editing — pull_record","text":"S7 object representing record.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/pull_record.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pull a record from a GEDCOM object for editing — pull_record","text":"record removed gedcom object, rather copy taken.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/push_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Push an edited record back into a GEDCOM object — push_record","title":"Push an edited record back into a GEDCOM object — push_record","text":"Push edited record back GEDCOM object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/push_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push an edited record back into a GEDCOM object — push_record","text":"","code":"push_record(gedcom, record)"},{"path":"https://jl5000.github.io/gedcomS7/reference/push_record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push an edited record back into a GEDCOM object — push_record","text":"gedcom object representing GEDCOM file. record object representing record place back GEDCOM object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/push_record.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Push an edited record back into a GEDCOM object — push_record","text":"updated GEDCOM object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/push_record.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Push an edited record back into a GEDCOM object — push_record","text":"function automatically keep family links individuals updated. also update record last_updated update_change_dates gedcom object set TRUE.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/read_gedcom.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a GEDCOM file — read_gedcom","title":"Import a GEDCOM file — read_gedcom","text":"Imports *.ged file creates gedcom object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/read_gedcom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a GEDCOM file — read_gedcom","text":"","code":"read_gedcom(filepath = file.choose())"},{"path":"https://jl5000.github.io/gedcomS7/reference/read_gedcom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a GEDCOM file — read_gedcom","text":"filepath full filepath GEDCOM file.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/read_gedcom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a GEDCOM file — read_gedcom","text":"gedcom S7 object.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a regular expression for DATE values — reg_date","title":"Construct a regular expression for DATE values — reg_date","text":"Construct regular expression DATE values","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a regular expression for DATE values — reg_date","text":"","code":"reg_date(flatten = TRUE, only = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a regular expression for DATE values — reg_date","text":"flatten logical value determines whether single regex string returned (flatten = TRUE) vector returned (flatten = FALSE). vector output used regexes need combined regexes. , anchored ^ $ separated | (). Whether allow strings date. FALSE, regular expression accepts patterns text can come date().","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a regular expression for DATE values — reg_date","text":"Either single regex string vector .","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a regular expression for DATE values — reg_date","text":"DATE (subsequent DATE_CALENDAR) pattern can potentially handle several different calendar types, package implemented Gregorian calendar.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_approximated.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the regex pattern for DATE_APPROXIMATED values — reg_date_approximated","title":"Construct the regex pattern for DATE_APPROXIMATED values — reg_date_approximated","text":"Construct regex pattern DATE_APPROXIMATED values","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_approximated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the regex pattern for DATE_APPROXIMATED values — reg_date_approximated","text":"","code":"reg_date_approximated(flatten = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_approximated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the regex pattern for DATE_APPROXIMATED values — reg_date_approximated","text":"flatten logical value determines whether single regex string returned (flatten = TRUE) vector returned (flatten = FALSE). vector output used regexes need combined regexes. , anchored ^ $ separated | ().","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_approximated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the regex pattern for DATE_APPROXIMATED values — reg_date_approximated","text":"Either single regex string vector .","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_exact.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a regular expression for DATE_EXACT values — reg_date_exact","title":"Construct a regular expression for DATE_EXACT values — reg_date_exact","text":"Construct regular expression DATE_EXACT values","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_exact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a regular expression for DATE_EXACT values — reg_date_exact","text":"","code":"reg_date_exact(only = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_exact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a regular expression for DATE_EXACT values — reg_date_exact","text":"Whether allow strings date_exact. FALSE, regular expression accepts patterns text can come date_exact().","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_exact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a regular expression for DATE_EXACT values — reg_date_exact","text":"regex string","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the regex pattern for DATE_PERIOD values — reg_date_period","title":"Construct the regex pattern for DATE_PERIOD values — reg_date_period","text":"Construct regex pattern DATE_PERIOD values","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the regex pattern for DATE_PERIOD values — reg_date_period","text":"","code":"reg_date_period(flatten = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the regex pattern for DATE_PERIOD values — reg_date_period","text":"flatten logical value determines whether single regex string returned (flatten = TRUE) vector returned (flatten = FALSE). vector output used regexes need combined regexes. , anchored ^ $ separated | ().","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the regex pattern for DATE_PERIOD values — reg_date_period","text":"Either single regex string vector .","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the regex pattern for DATE_RANGE values — reg_date_range","title":"Construct the regex pattern for DATE_RANGE values — reg_date_range","text":"Construct regex pattern DATE_RANGE values","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the regex pattern for DATE_RANGE values — reg_date_range","text":"","code":"reg_date_range(flatten = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the regex pattern for DATE_RANGE values — reg_date_range","text":"flatten logical value determines whether single regex string returned (flatten = TRUE) vector returned (flatten = FALSE). vector output used regexes need combined regexes. , anchored ^ $ separated | ().","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the regex pattern for DATE_RANGE values — reg_date_range","text":"Either single regex string vector .","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the regex pattern for DATE_VALUE values — reg_date_value","title":"Construct the regex pattern for DATE_VALUE values — reg_date_value","text":"Construct regex pattern DATE_VALUE values","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the regex pattern for DATE_VALUE values — reg_date_value","text":"","code":"reg_date_value()"},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_date_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the regex pattern for DATE_VALUE values — reg_date_value","text":"Either single regex string vector .","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_xref.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a regular expression for an xref — reg_xref","title":"Construct a regular expression for an xref — reg_xref","text":"Construct regular expression xref","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_xref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a regular expression for an xref — reg_xref","text":"","code":"reg_xref(only = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_xref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a regular expression for an xref — reg_xref","text":"Whether allow strings xrefs. FALSE, regular expression accepts patterns text can come xref.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/reg_xref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a regular expression for an xref — reg_xref","text":"regular expression pattern xref.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/regex_combn.html","id":null,"dir":"Reference","previous_headings":"","what":"Enumerate all combinations of regex patterns — regex_combn","title":"Enumerate all combinations of regex patterns — regex_combn","text":"Enumerate combinations regex patterns","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/regex_combn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enumerate all combinations of regex patterns — regex_combn","text":"","code":"regex_combn(reg1, reg2)"},{"path":"https://jl5000.github.io/gedcomS7/reference/regex_combn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enumerate all combinations of regex patterns — regex_combn","text":"reg1 vector regex patterns. reg2 vector regex patterns.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/regex_combn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enumerate all combinations of regex patterns — regex_combn","text":"vector combinations concatenation reg1 reg2.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_living.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove living individuals in a GEDCOM object — rm_living","title":"Remove living individuals in a GEDCOM object — rm_living","text":"Remove living individuals GEDCOM object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_living.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove living individuals in a GEDCOM object — rm_living","text":"","code":"rm_living(x, max_age = 100)"},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_living.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove living individuals in a GEDCOM object — rm_living","text":"x gedcom object. max_age maximum age assume living person (date birth given).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_living.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove living individuals in a GEDCOM object — rm_living","text":"gedcom object cleansed information living individuals.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove records from a GEDCOM object — rm_records","title":"Remove records from a GEDCOM object — rm_records","text":"Remove records GEDCOM object","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove records from a GEDCOM object — rm_records","text":"","code":"rm_records(x, xrefs, void_refs = TRUE)"},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove records from a GEDCOM object — rm_records","text":"x gedcom object. xrefs character vector xrefs remove. void_refs Whether replace references record @VOID@ reference. indicates people reference record . Note set FALSE, risk losing supplementary information (e.g. pedigree data family links).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove records from a GEDCOM object — rm_records","text":"gedcom object records removed.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_xref_ptrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove xref pointers from GEDCOM lines — rm_xref_ptrs","title":"Remove xref pointers from GEDCOM lines — rm_xref_ptrs","text":"Remove xref pointers GEDCOM lines","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_xref_ptrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove xref pointers from GEDCOM lines — rm_xref_ptrs","text":"","code":"rm_xref_ptrs(lines, xref, void_refs)"},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_xref_ptrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove xref pointers from GEDCOM lines — rm_xref_ptrs","text":"lines character vector GEDCOM lines. xref xref remove. void_refs Whether replace references xref @VOID@ reference, remove structure entirely.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/rm_xref_ptrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove xref pointers from GEDCOM lines — rm_xref_ptrs","text":"GEDCOM lines without pointers xref.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/split_gedcom_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Create continuation lines — split_gedcom_values","title":"Create continuation lines — split_gedcom_values","text":"function introduces CONT lines line values contain line breaks.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/split_gedcom_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create continuation lines — split_gedcom_values","text":"","code":"split_gedcom_values(lines)"},{"path":"https://jl5000.github.io/gedcomS7/reference/split_gedcom_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create continuation lines — split_gedcom_values","text":"lines character vector gedcom lines.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/split_gedcom_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create continuation lines — split_gedcom_values","text":"new character vector gedcom lines, possibly expanded include CONT lines.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/write_gedcom.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a gedcom object to disk as a GEDCOM file — write_gedcom","title":"Save a gedcom object to disk as a GEDCOM file — write_gedcom","text":"Save gedcom object disk GEDCOM file","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/write_gedcom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a gedcom object to disk as a GEDCOM file — write_gedcom","text":"","code":"write_gedcom(   gedcom,   filepath = file.choose(),   inc_confid = TRUE,   inc_private = TRUE,   inc_living = TRUE )"},{"path":"https://jl5000.github.io/gedcomS7/reference/write_gedcom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a gedcom object to disk as a GEDCOM file — write_gedcom","text":"gedcom gedcom object. filepath full filepath write . inc_confid Whether include records marked confidential. inc_private Whether include records marked private. inc_living Whether include individual records suspected living people.","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/write_gedcom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a gedcom object to disk as a GEDCOM file — write_gedcom","text":"filepath (invisibly).","code":""},{"path":"https://jl5000.github.io/gedcomS7/reference/write_gedcom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a gedcom object to disk as a GEDCOM file — write_gedcom","text":"function prepares gedcom object writes filepath. Steps taken include filtering sensitive data, escaping \"@\" signs (another \"@\") , splitting long lines onto separate lines.","code":""}]
